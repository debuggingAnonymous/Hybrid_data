set_follow_state(enum SymlinkOption opt)

  if (options.debug_options & DebugStat)

      switch (opt)

	  options.xstat = optionp_stat;

	  break;

  options.symlink_handling = opt;

}

parse_begin_user_args (char **args, int argno, const struct predicate *last, const struct predicate *predicates)

  first_nonoption_arg = NULL;

}

parse_end_user_args (char **args, int argno, const struct predicate *last, const struct predicate *predicates)

}

found_parser(const char *original_arg, const struct parser_table *entry)

  if (entry->type != ARG_POSITIONAL_OPTION)

      if (entry->type == ARG_OPTION)

	  if (first_nonoption_arg == NULL)

	      first_nonoption_arg = original_arg;

  return entry;

find_parser (char *search_name)

  const char *original_arg = search_name;

  if (0 == strncmp("-newer", search_name, 6)

  if (*search_name == '-')

    search_name++;

  for (i = 0; parse_table[i].parser_name != 0; i++)

      if (strcmp (parse_table[i].parser_name, search_name) == 0)

	  return found_parser(original_arg, &parse_table[i]);

estimate_file_age_success_rate(float num_days)

  if (num_days < 0.1)

  else if (num_days < 1)

  else if (num_days > 100)

      return 0.39f;

estimate_timestamp_success_rate(time_t when)

  int num_days = (options.cur_day_start - when) / 86400;

  return estimate_file_age_success_rate(num_days);

collect_arg(char **argv, int *arg_ptr, const char **collected_arg)

  if ((argv == NULL) || (argv[*arg_ptr] == NULL))

      *collected_arg = argv[*arg_ptr];

      (*arg_ptr)++;

      return true;

parse_closeparen (const struct parser_table* entry, char **argv, int *arg_ptr)

  our_pred = get_new_pred (entry);

  our_pred->pred_func = pred_closeparen;

  our_pred->p_type = CLOSE_PAREN;

  our_pred->p_prec = NO_PREC;

  our_pred->need_stat = our_pred->need_type = false;

  return true;

parse_openparen (const struct parser_table* entry, char **argv, int *arg_ptr)

  our_pred = get_new_pred_chk_op (entry);

  our_pred->pred_func = pred_openparen;

  our_pred->p_type = OPEN_PAREN;

  our_pred->p_prec = NO_PREC;

  our_pred->need_stat = our_pred->need_type = false;

  return true;

parse_print (const struct parser_table* entry, char **argv, int *arg_ptr)

  our_pred = insert_primary (entry);

  our_pred->side_effects = our_pred->no_default_print = true;

  our_pred->need_stat = our_pred->need_type = false;

  open_stdout(&our_pred->args.printf_vec);

  return true;

stream_is_tty(FILE *fp)

  int fd = fileno(fp);

  if (-1 == fd)

      return isatty(fd) ? true 
get_relative_timestamp (const char *str,

  if (get_comp_type(&str, &result->kind))

      switch (result->kind)

	case COMP_LT
      if (xstrtod(str, NULL, &offset, strtod))

	  f = modf(offset * sec_per_unit, &seconds);

	  result->ts.tv_sec  = origin - seconds;

	  result->ts.tv_nsec = fabs(f * 1e9);

	  checkval = (uintmax_t)origin - seconds;

	  if (checkval != result->ts.tv_sec)

	  return true;

parse_time (const struct parser_table* entry, char *argv[], int *arg_ptr)

  const char *errmsg = "arithmetic overflow while converting %s days to a number of seconds";

  if (!collect_arg(argv, arg_ptr, &timearg))

  orig_timearg = timearg;

  origin = options.cur_day_start;

  if (get_comp_type(&timearg, &comp))

      if (COMP_LT == tval.kind)      

  timearg = orig_timearg;

  if (!get_relative_timestamp(timearg, &tval, origin, DAYSECS, errmsg))

  our_pred = insert_primary (entry);

  our_pred->args.reftime = tval;

  our_pred->est_success_rate = estimate_timestamp_success_rate(tval.ts.tv_sec);

  if (options.debug_options & DebugExpressionTree)

  return true;

get_comp_type(const char **str, enum comparison_type *comp_type)

  switch (**str)

      *comp_type = COMP_LT;

      (*str)++;

      break;

  return true;

open_output_file (const char *path, struct format_val *p)

  p->segment = NULL;

  p->quote_opts = clone_quoting_options (NULL);

  if (!strcmp (path, "/dev/stderr"))

  else if (!strcmp (path, "/dev/stdout"))

      p->stream = stdout;

      p->filename = _("standard output");

  p->dest_is_tty = stream_is_tty(p->stream);

}

open_stdout (struct format_val *p)

  open_output_file("/dev/stdout", p);

}

