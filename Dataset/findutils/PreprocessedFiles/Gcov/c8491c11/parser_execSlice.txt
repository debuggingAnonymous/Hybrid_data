set_follow_state(enum SymlinkOption opt)

  if (options.debug_options & DebugStat)

      switch (opt)

	  options.xstat = optionp_stat;

	  break;

  options.symlink_handling = opt;

}

parse_begin_user_args (char **args, int argno,

  first_nonoption_arg = NULL;

}

found_parser(const char *original_arg, const struct parser_table *entry)

  if (entry->type != ARG_POSITIONAL_OPTION)

      if (entry->type == ARG_OPTION)

	  if (first_nonoption_arg == NULL)

	      first_nonoption_arg = original_arg;

  return entry;

find_parser (char *search_name)

  const char *original_arg = search_name;

  if (0 == strncmp("-newer", search_name, 6)

      && (8 == strlen(search_name)))

      return found_parser(original_arg, &parse_entry_newerXY);

  if (*search_name == '-')

  for (i = 0; parse_table[i].parser_name != 0; i++)

      if (strcmp (parse_table[i].parser_name, search_name) == 0)

	  return found_parser(original_arg, &parse_table[i]);

parse_newerXY (const struct parser_table* entry, char **argv, int *arg_ptr)

  if ((argv == NULL) || (argv[*arg_ptr] == NULL))

  else if (8u != strlen(argv[*arg_ptr]))

      const char validchars[] = "aBcmt";

      assert (0 == strncmp("-newer", argv[*arg_ptr], 6));

      x = argv[*arg_ptr][6];

      y = argv[*arg_ptr][7];

      if ('B' == x || 'B' == y)

      if (x == 't'

	  || 0 == strchr(validchars, x)

	  || 0 == strchr( validchars, y))

	  (*arg_ptr)++;

	  our_pred = insert_primary (entry);

	  switch (x)

	      our_pred->args.reftime.xval = XVAL_ATIME;

	      break;

	  if ('t' == y)

	      set_stat_placeholders(&stat_newer);

	      if ((*options.xstat) (argv[*arg_ptr], &stat_newer))

		fatal_file_error(argv[*arg_ptr]);

parse_openparen (const struct parser_table* entry, char **argv, int *arg_ptr)

  our_pred = get_new_pred_chk_op (entry);

  our_pred->pred_func = pred_openparen;

  our_pred->p_type = OPEN_PAREN;

  our_pred->p_prec = NO_PREC;

  our_pred->need_stat = our_pred->need_type = false;

  return true;

