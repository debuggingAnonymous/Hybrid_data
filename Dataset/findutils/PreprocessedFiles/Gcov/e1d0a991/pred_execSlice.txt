pred_and (const char *pathname, struct stat *stat_buf, struct predicate *pred_ptr)

  if (pred_ptr->pred_left == NULL

      || apply_predicate (pathname, stat_buf, pred_ptr->pred_left))

      return apply_predicate (pathname, stat_buf, pred_ptr->pred_right);

    return false;

record_exec_dir (struct exec_val *execp)

  if (!execp->wd_for_exec)

      assert (!execp->state.todo);

      execp->wd_for_exec = xmalloc (sizeof (*execp->wd_for_exec));

      execp->wd_for_exec->name = NULL;

      execp->wd_for_exec->desc = openat (state.cwd_dir_fd, ".", O_RDONLY);

      if (execp->wd_for_exec->desc < 0)

      set_cloexec_flag (execp->wd_for_exec->desc, true);

  return true;

new_impl_pred_exec (const char *pathname,

  struct exec_val *execp = &pred_ptr->args.exec_vec;

  size_t len = strlen (pathname);

  if (is_exec_in_local_dir (pred_ptr->pred_func))

      if (!record_exec_dir (execp))

  if (execp->multiple)

      for (i=0; i<execp->num_args; ++i)

	  bc_do_insert (&execp->ctl,

			execp->replace_vec[i],

			strlen (execp->replace_vec[i]),

      bc_do_exec (&execp->ctl, &execp->state);

      if (WIFEXITED(execp->last_child_status))

	  if (0 == WEXITSTATUS(execp->last_child_status))

	    return true;	/* The child succeeded. */

pred_execdir (const char *pathname, struct stat *stat_buf, struct predicate *pred_ptr)

   const char *prefix = (state.rel_pathname[0] == '/') ? NULL 
   return new_impl_pred_exec (state.rel_pathname, stat_buf, pred_ptr,

pred_name_common (const char *pathname, const char *str, int flags)

  char *base = base_name (pathname);

  strip_trailing_slashes (base);

  b = fnmatch (str, base, flags) == 0;

  free (base);

  return b;

pred_name (const char *pathname, struct stat *stat_buf, struct predicate *pred_ptr)

  return pred_name_common (pathname, pred_ptr->args.str, 0);

launch (struct buildcmd_control *ctl, void *usercontext, int argc, char **argv)

  struct exec_val *execp = usercontext;

  fflush (stdout);

  fflush (stderr);

  if (first_time)

      first_time = 0;

      signal (SIGCHLD, SIG_DFL);

  child_pid = fork ();

  if (child_pid == -1)

  if (child_pid == 0)

  while (waitpid (child_pid, &(execp->last_child_status), 0) == (pid_t) -1)

  if (WIFSIGNALED (execp->last_child_status))

  if (0 == WEXITSTATUS (execp->last_child_status))

      return 1;			/* OK */

void show_success_rates (const struct predicate *p)

  if (options.debug_options & DebugSuccessRates)

}

pred_sanity_check (const struct predicate *predicates)

  for (p=predicates; p != NULL; p=p->pred_next)

      assert (p->pred_func != NULL);

      assert (p->parser_entry != NULL);

      if (p->parser_entry->pred_func)

	  assert (p->parser_entry->pred_func == p->pred_func);

      switch (p->parser_entry->type)

	  assert (p->side_effects); /* actions have side effects. */

	  if (!pred_is (p, pred_prune) && !pred_is(p, pred_quit))

	      assert (p->no_default_print);

	  break;

	  assert (!p->no_default_print);

	  assert (!p->side_effects);

	  break;

}

