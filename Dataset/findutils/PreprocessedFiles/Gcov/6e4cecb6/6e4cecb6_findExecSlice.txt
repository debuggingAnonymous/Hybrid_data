following_links(void)

  switch (options.symlink_handling)

      return (state.curdepth == 0);

optionh_stat(const char *name, struct stat *p)

  if (0 == state.curdepth) 

      int rv = stat(name, p);

      if (0 == rv)

	return 0;		/* success */

set_follow_state(enum SymlinkOption opt)

  switch (opt)

      options.xstat = optionp_stat;

      break;

      options.xstat = optionh_stat;

      options.no_leaf_check = true;

  options.symlink_handling = opt;

}

cleanup(void)

  if (eval_tree)

      complete_pending_execs(eval_tree);

      complete_pending_execdirs(eval_tree);

}

get_statinfo (const char *pathname, const char *name, struct stat *p)

  if (!state.have_stat && (*options.xstat) (name, p) != 0)

  state.have_stat = true;

  state.have_type = true;

  state.type = p->st_mode;

  return 0;

get_info (const char *pathname,

  if (pred_ptr->need_stat)

  if ((pred_ptr->need_type && (0 == state.have_type)))

  return 0;

check_nofollow(void)

  if (0 == uname(&uts))

      release = atof(uts.release);

      if (0 == strcmp("Linux", uts.sysname))

	  return release >= 2.2; /* close enough */

main (int argc, char **argv)

  int end_of_leading_options = 0; /* First arg after any -H/-L etc. */

  program_name = argv[0];

  options.open_nofollow_available = check_nofollow();

  setlocale (LC_ALL, "");

  atexit (close_stdout);

  if (isatty(0))

      options.warnings = false;

  predicates = NULL;

  last_pred = NULL;

  options.do_dir_first = true;

  options.maxdepth = options.mindepth = -1;

  options.start_time = time (NULL);

  options.cur_day_start = options.start_time - DAYSECS;

  options.full_days = false;

  options.stay_on_filesystem = false;

  options.ignore_readdir_race = false;

  state.exit_status = 0;

  if (getenv("POSIXLY_CORRECT"))

    options.output_block_size = 1024;

  if (getenv("FIND_BLOCK_SIZE"))

  options.no_leaf_check = false;

  set_follow_state(SYMLINK_NEVER_DEREF); /* The default is equivalent to -P. */

  for (i=1; (end_of_leading_options = i) < argc; ++i)

      if (0 == strcmp("-H", argv[i]))

	  set_follow_state(SYMLINK_DEREF_ARGSONLY);

      else if (0 == strcmp("-L", argv[i]))

      else if (0 == strcmp("-P", argv[i]))

      else if (0 == strcmp("--", argv[i]))

	  end_of_leading_options = i; /* Next time start with this option */

	  break;

  for (i = end_of_leading_options; i < argc && strchr ("-!(),", argv[i][0]) == NULL; i++)

  parse_open (argv, &argc);

  while (i < argc)

  if (predicates->pred_next == NULL)

      cur_pred = predicates;

      predicates = last_pred = predicates->pred_next;

      free ((char *) cur_pred);

      parse_print (argv, &argc);

  cur_pred = predicates;

  eval_tree = get_expr (&cur_pred, NO_PREC);

  if (cur_pred != NULL)

  opt_expr (&eval_tree);

  mark_stat (eval_tree);

  mark_type (eval_tree);

  if (!options.open_nofollow_available)

  starting_desc = open (".", O_RDONLY);

  if (0 <= starting_desc && fchdir (starting_desc) != 0)

  if (starting_desc < 0)

  if ((*options.xstat) (".", &starting_stat_buf) != 0)

  for (i = end_of_leading_options; i < argc && strchr ("-!(),", argv[i][0]) == NULL; i++)

      process_top_path (argv[i], 0);

  if (i == end_of_leading_options)

  cleanup();

  return state.exit_status;

safely_chdir_nofollow(const char *dest,

  extraflags = following_links() ? O_NOFOLLOW 
  errno = 0;

  fd = open(dest, O_RDONLY|extraflags);

  if (fd < 0)

      switch (errno)

	  return SafeChdirFailSymlink; /* This is why we use O_NOFOLLOW */

  errno = 0;

  if (0 == fchdir(fd))

      close(fd);

      return SafeChdirOK;

safely_chdir(const char *dest,

  complete_pending_execdirs(eval_tree);

  if (options.open_nofollow_available)

    return safely_chdir_nofollow(dest, direction, statbuf_dest, symlink_handling);

chdir_back (void)

  if (starting_desc < 0)

      if (fchdir (starting_desc) != 0)

}

process_top_path (char *pathname, mode_t mode)

  char *parent_dir = dir_name(pathname);

  char *base = base_name(pathname);

  state.curdepth = 0;

  state.path_length = strlen (pathname);

  if (0 == strcmp(pathname, parent_dir))

      dirchange = 1;

      if (0 == strcmp(base, ".."))

	direction = TraversingDown;

      chdir_status = safely_chdir(parent_dir, direction, &st, SymlinkFollowOk);

      if (SafeChdirOK != chdir_status)

	  return;

  free (parent_dir);

  parent_dir = NULL;

  process_path (pathname, base, false, ".", mode);

  complete_pending_execdirs(eval_tree);

  if (dirchange)

      chdir_back();

digest_mode(mode_t mode,

  if (mode)

      if (leaf)

	  if (get_statinfo(pathname, name, pstat) != 0)

	  state.type = pstat->st_mode;

	  state.have_type = true;

  return 1;

process_path (char *pathname, char *name, boolean leaf, char *parent,

  stat_buf.st_mode = 0;

  state.rel_pathname = name;

  state.type = 0;

  state.have_stat = false;

  state.have_type = false;

  if (!digest_mode(mode, pathname, name, &stat_buf, leaf))

  if (!S_ISDIR (state.type))

  if (get_statinfo(pathname, name, &stat_buf) != 0)

  state.have_stat = true;

  mode = state.type = stat_buf.st_mode;	/* use full info now that we have it. */

  state.stop_at_current_level =

    options.maxdepth >= 0

    && state.curdepth >= options.maxdepth;

  for (i = 0; i <= dir_curr; i++)

  if (dir_alloc <= ++dir_curr)

      dir_alloc += DIR_ALLOC_STEP;

      dir_ids = (struct dir_id *)

	xrealloc ((char *) dir_ids, dir_alloc * sizeof (struct dir_id));

  dir_ids[dir_curr].ino = stat_buf.st_ino;

  dir_ids[dir_curr].dev = stat_buf.st_dev;

  if (options.stay_on_filesystem)

  if (options.do_dir_first && state.curdepth >= options.mindepth)

    apply_predicate (pathname, &stat_buf, eval_tree);

  if (state.stop_at_current_level == false)

    process_dir (pathname, name, strlen (pathname), &stat_buf, parent);

  if (options.do_dir_first == false && state.curdepth >= options.mindepth)

  dir_curr--;

  return 1;

complete_pending_execdirs(struct predicate *p)

  if (NULL == p)

    return;

  complete_pending_execdirs(p->pred_left);

  if (p->pred_func == pred_execdir || p->pred_func == pred_okdir)

  complete_pending_execdirs(p->pred_right);

complete_pending_execs(struct predicate *p)

  if (NULL == p)

    return;

  complete_pending_execs(p->pred_left);

  if (p->pred_func == pred_exec && p->args.exec_vec.multiple)

  complete_pending_execs(p->pred_right);

process_dir (char *pathname, char *name, int pathlen, struct stat *statp, char *parent)

  subdirs_left = statp->st_nlink - 2; /* Account for name and ".". */

  errno = 0;

  name_space = savedirinfo (name, &dirinfo);

  if (name_space == NULL)

      if (pathname[pathlen - 1] == '/')

	pathname_len = pathlen + 2; /* For '/' and '\0'. */

      cur_path_size = 0;

      cur_path = NULL;

      complete_pending_execdirs(eval_tree);

      if (strcmp (name, "."))

	  enum SafeChdirStatus status = safely_chdir (name, TraversingDown, &stat_buf, SymlinkHandleDefault);

	  switch (status)

	      error (0, errno, "%s", pathname);

	      state.exit_status = 1;

	      return;

