static void left_dir(void)

  if (ftsoptions & FTS_CWDFD)

}

static void inside_dir(int dirfd)

  if (ftsoptions & FTS_CWDFD)

}

visit(FTS *p, FTSENT *ent, struct stat *pstat)

  state.curdepth = ent->fts_level;

  state.have_stat = (ent->fts_info != FTS_NS) && (ent->fts_info != FTS_NSOK);

  state.rel_pathname = ent->fts_accpath;

  state.cwd_dir_fd   = p->fts_cwd_fd;

  eval_tree = get_eval_tree();

  (*(eval_tree)->pred_func)(ent->fts_path, pstat, eval_tree);

  if (state.stop_at_current_level)

}

consider_visiting(FTS *p, FTSENT *ent)

  if (options.debug_options & DebugSearch)

  if (ent->fts_info == FTS_DP)

  else if (ent->fts_level > prev_depth || ent->fts_level==0)

      left_dir();

  inside_dir(p->fts_cwd_fd);

  prev_depth = ent->fts_level;

  if (ent->fts_info == FTS_ERR

      || ent->fts_info == FTS_DNR)

  else if (ent->fts_info == FTS_DC)

  else if (ent->fts_info == FTS_SLNONE)

  if (ent->fts_info == FTS_NSOK)

      state.have_stat = true;

      state.have_type = true;

      statbuf = *(ent->fts_statp);

      state.type = mode = statbuf.st_mode;

  if (mode)

      if (!digest_mode(mode, ent->fts_path, ent->fts_name, &statbuf, 0))

  ignore = 0;

  isdir = S_ISDIR(statbuf.st_mode)

    || (FTS_D  == ent->fts_info)

    || (FTS_DP == ent->fts_info)

    || (FTS_DC == ent->fts_info);

  if (isdir && (ent->fts_info == FTS_NSOK))

  if (options.maxdepth >= 0)

  if ( (ent->fts_info == FTS_D) && !options.do_dir_first )

  else if ( (ent->fts_info == FTS_DP) && options.do_dir_first )

  else if (ent->fts_level < options.mindepth)

  if (!ignore)

      visit(p, ent, &statbuf);

  if (state.execdirs_outstanding)

  if (ent->fts_info == FTS_DP)

find(char *arg)

  state.starting_path_length = strlen(arg);

  inside_dir(AT_FDCWD);

  arglist[0] = arg;

  arglist[1] = NULL;

  switch (options.symlink_handling)

      ftsoptions |= FTS_COMFOLLOW|FTS_LOGICAL;

      break;

  if (options.stay_on_filesystem)

  p = fts_open(arglist, ftsoptions, NULL);

  if (NULL == p)

      while ( (ent=fts_read(p)) != NULL )

	  state.have_stat = false;

	  state.have_type = false;

	  state.type = 0;

	  consider_visiting(p, ent);

process_all_startpoints(int argc, char *argv[])

  for (i = 0; i < argc && !looks_like_expression(argv[i], true); i++)

  if (i == 0)

      char defaultpath[2] = ".";

      find(defaultpath);

main (int argc, char **argv)

  int end_of_leading_options = 0; /* First arg after any -H/-L etc. */

  program_name = argv[0];

  state.exit_status = 0;

  state.execdirs_outstanding = false;

  state.cwd_dir_fd = AT_FDCWD;

  set_option_defaults(&options);

  setlocale (LC_ALL, "");

  atexit (close_stdout);

  end_of_leading_options = process_leading_options(argc, argv);

  if (options.debug_options & DebugStat)

  eval_tree = build_expression_tree(argc, argv, end_of_leading_options);

  if (!options.open_nofollow_available)

  starting_desc = open (".", O_RDONLY

  if (0 <= starting_desc && fchdir (starting_desc) != 0)

  if (starting_desc < 0)

  process_all_startpoints(argc-end_of_leading_options, argv+end_of_leading_options);

