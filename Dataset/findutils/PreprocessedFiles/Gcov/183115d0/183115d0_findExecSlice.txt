initialise_wd_for_exec (struct exec_val *execp, int cwd_fd, const char *dir)

  execp->wd_for_exec = xmalloc (sizeof (*execp->wd_for_exec));

  execp->wd_for_exec->name = NULL;

  execp->wd_for_exec->desc = openat (cwd_fd, dir, O_RDONLY);

  if (execp->wd_for_exec->desc < 0)

    return false;

  set_cloexec_flag (execp->wd_for_exec->desc, true);

  return true;

record_exec_dir (struct exec_val *execp)

  if (!execp->state.todo)

      assert (!execp->state.todo);

      if (strchr (state.rel_pathname, '/'))

	  return initialise_wd_for_exec (execp, state.cwd_dir_fd, ".");

impl_pred_exec (const char *pathname,

  struct exec_val *execp = &pred_ptr->args.exec_vec;

  char *buf = NULL;

  const bool local = is_exec_in_local_dir (pred_ptr->pred_func);

  if (local)

      if (!record_exec_dir (execp))

	  error (EXIT_FAILURE, errno,

      target = buf = base_name (state.rel_pathname);

      if ('/' == target[0])

	  prefix = "./";

	  pfxlen = 2u;

  if (execp->multiple)

      for (i=0; i<execp->num_args; ++i)

	  bc_do_insert (&execp->ctl,

			execp->replace_vec[i],

			strlen (execp->replace_vec[i]),

      bc_do_exec (&execp->ctl, &execp->state);

      if (WIFEXITED(execp->last_child_status))

	  if (0 == WEXITSTATUS(execp->last_child_status))

	    result = true;	/* The child succeeded. */

  if (buf)

      assert (local);

      free (buf);

  return result;

launch (struct buildcmd_control *ctl, void *usercontext, int argc, char **argv)

  struct exec_val *execp = usercontext;

  fflush (stdout);

  fflush (stderr);

  if (first_time)

      first_time = 0;

      signal (SIGCHLD, SIG_DFL);

  child_pid = fork ();

  if (child_pid == -1)

  if (child_pid == 0)

  while (waitpid (child_pid, &(execp->last_child_status), 0) == (pid_t) -1)

  if (WIFSIGNALED (execp->last_child_status))

  if (0 == WEXITSTATUS (execp->last_child_status))

      return 1;			/* OK */

