get_noop(void)

  if (NULL == noop)

      for (i = 0; parse_table[i].parser_name != 0; i++)

	  if (ARG_NOOP ==parse_table[i].type)

	      noop = &(parse_table[i]);

	      break;

  return noop;

set_follow_state(enum SymlinkOption opt)

  if (options.debug_options & DebugStat)

      switch (opt)

	  options.xstat = optionp_stat;

	  break;

  options.symlink_handling = opt;

}

parse_begin_user_args (char **args, int argno, const struct predicate *last, const struct predicate *predicates)

  first_nonoption_arg = NULL;

}

find_parser (char *search_name)

  const char *original_arg = search_name;

  if (*search_name == '-')

    search_name++;

  for (i = 0; parse_table[i].parser_name != 0; i++)

      if (strcmp (parse_table[i].parser_name, search_name) == 0)

	  if (parse_table[i].type != ARG_POSITIONAL_OPTION)

	      if (parse_table[i].type == ARG_OPTION)

		  if ((first_nonoption_arg != NULL)

		  if (first_nonoption_arg == NULL)

		      first_nonoption_arg = original_arg;

	  return &parse_table[i];

parse_maxdepth (const struct parser_table* entry, char **argv, int *arg_ptr)

  if ((argv == NULL) || (argv[*arg_ptr] == NULL))

  depth_len = strspn (argv[*arg_ptr], "0123456789");

  if ((depth_len == 0) || (argv[*arg_ptr][depth_len] != '\0'))

  options.maxdepth = atoi (argv[*arg_ptr]);

  if (options.maxdepth < 0)

  (*arg_ptr)++;

  return parse_noop(entry, argv, arg_ptr);

parse_open (const struct parser_table* entry, char **argv, int *arg_ptr)

  our_pred = get_new_pred_chk_op (entry);

  our_pred->pred_func = pred_open;

  our_pred->p_type = OPEN_PAREN;

  our_pred->p_prec = NO_PREC;

  our_pred->need_stat = our_pred->need_type = false;

  return true;

parse_regex (const struct parser_table* entry, char **argv, int *arg_ptr)

  return insert_regex (argv, arg_ptr, entry, options.regex_options);

insert_regex (char **argv, int *arg_ptr, const struct parser_table *entry, int regex_options)

  if ((argv == NULL) || (argv[*arg_ptr] == NULL))

  our_pred = insert_primary_withpred (entry, pred_regex);

  our_pred->need_stat = our_pred->need_type = false;

  re = (struct re_pattern_buffer *)

  our_pred->args.regex = re;

  re->allocated = 100;

  re->buffer = (unsigned char *) xmalloc (re->allocated);

  re->fastmap = NULL;

  re_set_syntax(regex_options);

  re->syntax = regex_options;

  re->translate = NULL;

  error_message = re_compile_pattern (argv[*arg_ptr], strlen (argv[*arg_ptr]),

  if (error_message)

  (*arg_ptr)++;

  our_pred->est_success_rate = estimate_pattern_match_rate(argv[*arg_ptr], 1);

parse_true (const struct parser_table* entry, char **argv, int *arg_ptr)

  our_pred = insert_primary (entry);

  our_pred->need_stat = our_pred->need_type = false;

  our_pred->est_success_rate = 1.0f;

  return true;

parse_noop (const struct parser_table* entry, char **argv, int *arg_ptr)

  return parse_true(get_noop(), argv, arg_ptr);

