static void set_close_on_exec(int fd)

  flags = fcntl(fd, F_GETFD);

  if (flags >= 0)

      flags |= FD_CLOEXEC;

      fcntl(fd, F_SETFD, flags);

}

int get_current_dirfd(void)

  if (ftsoptions & FTS_CWDFD)

      assert (curr_fd != -1);

      assert ( (AT_FDCWD == curr_fd) || (curr_fd >= 0) );

      if (AT_FDCWD == curr_fd)

	return starting_desc;

static void left_dir(void)

  if (ftsoptions & FTS_CWDFD)

      if (curr_fd >= 0)

	  close(curr_fd);

	  curr_fd = -1;

}

static void inside_dir(int dir_fd)

  if (ftsoptions & FTS_CWDFD)

      assert (dir_fd == AT_FDCWD || dir_fd >= 0);

      state.cwd_dir_fd = dir_fd;

      if (curr_fd < 0)

	  if (AT_FDCWD == dir_fd)

	      curr_fd = AT_FDCWD;

	  else if (dir_fd >= 0)

	      curr_fd = dup(dir_fd);

	      set_close_on_exec(curr_fd);

}

visit(FTS *p, FTSENT *ent, struct stat *pstat)

  state.curdepth = ent->fts_level;

  state.have_stat = (ent->fts_info != FTS_NS) && (ent->fts_info != FTS_NSOK);

  state.rel_pathname = ent->fts_accpath;

  state.cwd_dir_fd   = p->fts_cwd_fd;

  eval_tree = get_eval_tree();

  apply_predicate(ent->fts_path, pstat, eval_tree);

  if (state.stop_at_current_level)

}

consider_visiting(FTS *p, FTSENT *ent)

  if (options.debug_options & DebugSearch)

  if (ent->fts_info == FTS_DP)

      left_dir();

  else if (ent->fts_level > prev_depth || ent->fts_level==0)

      left_dir();

  inside_dir(p->fts_cwd_fd);

  prev_depth = ent->fts_level;

  if (ent->fts_info == FTS_ERR

      || ent->fts_info == FTS_DNR)

  else if (ent->fts_info == FTS_DC)

  else if (ent->fts_info == FTS_SLNONE)

  else if (ent->fts_info == FTS_NS)

  if (ent->fts_info == FTS_NSOK

      || ent->fts_info == FTS_NS /* e.g. symlink loop */)

      assert (!state.have_stat);

      assert (ent->fts_info == FTS_NSOK || state.type != 0);

      mode = state.type;

      state.have_stat = true;

      state.have_type = true;

      statbuf = *(ent->fts_statp);

      state.type = mode = statbuf.st_mode;

      if (00000 == mode)

  if (mode)

      if (!digest_mode(mode, ent->fts_path, ent->fts_name, &statbuf, 0))

  ignore = 0;

  isdir = S_ISDIR(mode)

    || (FTS_D  == ent->fts_info)

    || (FTS_DP == ent->fts_info)

    || (FTS_DC == ent->fts_info);

  if (isdir && (ent->fts_info == FTS_NSOK))

  if (options.maxdepth >= 0)

  if ( (ent->fts_info == FTS_D) && !options.do_dir_first )

  else if ( (ent->fts_info == FTS_DP) && options.do_dir_first )

      ignore = 1;

  else if (ent->fts_level < options.mindepth)

  if (!ignore)

      visit(p, ent, &statbuf);

  if (state.execdirs_outstanding)

  if (ent->fts_info == FTS_DP)

      state.stop_at_current_level = false;

find(char *arg)

  state.starting_path_length = strlen(arg);

  inside_dir(AT_FDCWD);

  arglist[0] = arg;

  arglist[1] = NULL;

  switch (options.symlink_handling)

      ftsoptions |= FTS_COMFOLLOW|FTS_PHYSICAL;

      break;

  if (options.stay_on_filesystem)

  p = fts_open(arglist, ftsoptions, NULL);

  if (NULL == p)

      while ( (ent=fts_read(p)) != NULL )

	  state.have_stat = false;

	  state.have_type = !!ent->fts_statp->st_mode;

	  state.type = state.have_type ? ent->fts_statp->st_mode 
	  consider_visiting(p, ent);

      fts_close(p);

      p = NULL;

}

process_all_startpoints(int argc, char *argv[])

  for (i = 0; i < argc && !looks_like_expression(argv[i], true); i++)

      state.starting_path_length = strlen(argv[i]); /* TODO
      find(argv[i]);

  if (i == 0)

}

main (int argc, char **argv)

  int end_of_leading_options = 0; /* First arg after any -H/-L etc. */

  program_name = argv[0];

  state.exit_status = 0;

  state.execdirs_outstanding = false;

  state.cwd_dir_fd = AT_FDCWD;

  set_option_defaults(&options);

  setlocale (LC_ALL, "");

  atexit (close_stdout);

  end_of_leading_options = process_leading_options(argc, argv);

  if (options.debug_options & DebugStat)

  eval_tree = build_expression_tree(argc, argv, end_of_leading_options);

  if (!options.open_nofollow_available)

  starting_desc = open (".", O_RDONLY

  if (0 <= starting_desc && fchdir (starting_desc) != 0)

  if (starting_desc < 0)

  process_all_startpoints(argc-end_of_leading_options, argv+end_of_leading_options);

  show_success_rates(eval_tree);

  cleanup();

  return state.exit_status;

