        -:    0:Source:util.c
        -:    0:Graph:util.gcno
        -:    0:Data:util.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:/* util.c -- functions for initializing new tree elements, and other things.
        -:    2:   Copyright (C) 1990, 91, 92, 93, 94, 2000, 2003, 2004 Free Software Foundation, Inc.
        -:    3:
        -:    4:   This program is free software; you can redistribute it and/or modify
        -:    5:   it under the terms of the GNU General Public License as published by
        -:    6:   the Free Software Foundation; either version 2, or (at your option)
        -:    7:   any later version.
        -:    8:
        -:    9:   This program is distributed in the hope that it will be useful,
        -:   10:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   11:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   12:   GNU General Public License for more details.
        -:   13:
        -:   14:   You should have received a copy of the GNU General Public License
        -:   15:   along with this program; if not, write to the Free Software
        -:   16:   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
        -:   17:   USA.
        -:   18:*/
        -:   19:
        -:   20:#include "defs.h"
        -:   21:#include "../gnulib/lib/xalloc.h"
        -:   22:
        -:   23:#if ENABLE_NLS
        -:   24:# include <libintl.h>
        -:   25:# define _(Text) gettext (Text)
        -:   26:#else
        -:   27:# define _(Text) Text
        -:   28:#endif
        -:   29:#ifdef gettext_noop
        -:   30:# define N_(String) gettext_noop (String)
        -:   31:#else
        -:   32:/* See locate.c for explanation as to why not use (String) */
        -:   33:# define N_(String) String
        -:   34:#endif
        -:   35:
        -:   36:
        -:   37:/* Return a pointer to a new predicate structure, which has been
        -:   38:   linked in as the last one in the predicates list.
        -:   39:
        -:   40:   Set `predicates' to point to the start of the predicates list.
        -:   41:   Set `last_pred' to point to the new last predicate in the list.
        -:   42:   
        -:   43:   Set all cells in the new structure to the default values. */
        -:   44:
        -:   45:struct predicate *
        8:   46:get_new_pred (void)
        -:   47:{
        -:   48:  register struct predicate *new_pred;
        -:   49:
        8:   50:  if (predicates == NULL)
        -:   51:    {
        2:   52:      predicates = (struct predicate *)
        2:   53:	xmalloc (sizeof (struct predicate));
        2:   54:      last_pred = predicates;
        -:   55:    }
        -:   56:  else
        -:   57:    {
        6:   58:      new_pred = (struct predicate *) xmalloc (sizeof (struct predicate));
        6:   59:      last_pred->pred_next = new_pred;
        6:   60:      last_pred = new_pred;
        -:   61:    }
        8:   62:  last_pred->pred_func = NULL;
        -:   63:#ifdef	DEBUG
        -:   64:  last_pred->p_name = NULL;
        -:   65:#endif	/* DEBUG */
        8:   66:  last_pred->p_type = NO_TYPE;
        8:   67:  last_pred->p_prec = NO_PREC;
        8:   68:  last_pred->side_effects = false;
        8:   69:  last_pred->no_default_print = false;
        8:   70:  last_pred->need_stat = true;
        8:   71:  last_pred->need_type = true;
        8:   72:  last_pred->args.str = NULL;
        8:   73:  last_pred->pred_next = NULL;
        8:   74:  last_pred->pred_left = NULL;
        8:   75:  last_pred->pred_right = NULL;
        8:   76:  return (last_pred);
        -:   77:}
        -:   78:
        -:   79:/* Return a pointer to a new predicate, with operator check.
        -:   80:   Like get_new_pred, but it checks to make sure that the previous
        -:   81:   predicate is an operator.  If it isn't, the AND operator is inserted. */
        -:   82:
        -:   83:struct predicate *
        5:   84:get_new_pred_chk_op (void)
        -:   85:{
        -:   86:  struct predicate *new_pred;
        -:   87:
        5:   88:  if (last_pred)
        3:   89:    switch (last_pred->p_type)
        -:   90:      {
        -:   91:      case NO_TYPE:
    #####:   92:	error (1, 0, _("oops -- invalid default insertion of and!"));
    #####:   93:	break;
        -:   94:
        -:   95:      case PRIMARY_TYPE:
        -:   96:      case CLOSE_PAREN:
        1:   97:	new_pred = get_new_pred ();
        1:   98:	new_pred->pred_func = pred_and;
        -:   99:#ifdef	DEBUG
        -:  100:	new_pred->p_name = find_pred_name (pred_and);
        -:  101:#endif	/* DEBUG */
        1:  102:	new_pred->p_type = BI_OP;
        1:  103:	new_pred->p_prec = AND_PREC;
        1:  104:	new_pred->need_stat = false;
        1:  105:	new_pred->need_type = false;
        1:  106:	new_pred->args.str = NULL;
        -:  107:
        -:  108:      default:
        3:  109:	break;
        -:  110:      }
        5:  111:  return (get_new_pred ());
        -:  112:}
        -:  113:
        -:  114:/* Add a primary of predicate type PRED_FUNC to the predicate input list.
        -:  115:
        -:  116:   Return a pointer to the predicate node just inserted.
        -:  117:
        -:  118:   Fills in the following cells of the new predicate node:
        -:  119:
        -:  120:   pred_func	    PRED_FUNC
        -:  121:   args(.str)	    NULL
        -:  122:   p_type	    PRIMARY_TYPE
        -:  123:   p_prec	    NO_PREC
        -:  124:
        -:  125:   Other cells that need to be filled in are defaulted by
        -:  126:   get_new_pred_chk_op, which is used to insure that the prior node is
        -:  127:   either not there at all (we are the very first node) or is an
        -:  128:   operator. */
        -:  129:
        -:  130:struct predicate *
        3:  131:insert_primary (boolean (*pred_func) (/* ??? */))
        -:  132:{
        -:  133:  struct predicate *new_pred;
        -:  134:
        3:  135:  new_pred = get_new_pred_chk_op ();
        3:  136:  new_pred->pred_func = pred_func;
        -:  137:#ifdef	DEBUG
        -:  138:  new_pred->p_name = find_pred_name (pred_func);
        -:  139:#endif	/* DEBUG */
        3:  140:  new_pred->args.str = NULL;
        3:  141:  new_pred->p_type = PRIMARY_TYPE;
        3:  142:  new_pred->p_prec = NO_PREC;
        3:  143:  return (new_pred);
        -:  144:}
        -:  145:
        -:  146:void
    #####:  147:usage (char *msg)
        -:  148:{
    #####:  149:  if (msg)
    #####:  150:    fprintf (stderr, "%s: %s\n", program_name, msg);
    #####:  151:  fprintf (stderr, _("\
        -:  152:Usage: %s [-H] [-L] [-P] [path...] [expression]\n"), program_name);
    #####:  153:  exit (1);
        -:  154:}
