process_dir 

{

  char *name_space;

  int subdirs_left;

  int idx;

  struct stat stat_buf;

  struct savedir_dirinfo *dirinfo;



  subdirs_left = statp->st_nlink - 2;



  (*__errno_location ()) = 0;

  name_space = savedirinfo (name, &dirinfo);



  if (name_space == ((void *)0))

    {

      (((*__errno_location ()) != 0) ? (void) (0) : __assert_fail ("(*__errno_location ()) != 0", "find.c", 1705, __PRETTY_FUNCTION__));

      error (0, (*__errno_location ()), "%s", pathname);

      state.exit_status = 1;

    }

  else

    {

      register char *namep;

      char *cur_path;

      char *cur_name;

      unsigned cur_path_size;

      register unsigned file_len;

      register unsigned pathname_len;



      if (pathname[pathlen - 1] == '/')

 pathname_len = pathlen + 1;

      else

 pathname_len = pathlen + 2;

      cur_path_size = 0;

      cur_path = ((void *)0);













      complete_pending_execdirs(eval_tree);



      if (strcmp (name, "."))

 {

   enum SafeChdirStatus status = safely_chdir (name, TraversingDown, &stat_buf, SymlinkHandleDefault);

   switch (status)

     {

     case SafeChdirOK:













       dir_ids[dir_curr].dev = stat_buf.st_dev;

       dir_ids[dir_curr].ino = stat_buf.st_ino;

       break;



     case SafeChdirFailWouldBeUnableToReturn:

       error (0, (*__errno_location ()), ".");

       state.exit_status = 1;

       break;



     case SafeChdirFailNonexistent:

     case SafeChdirFailStat:

     case SafeChdirFailSymlink:

     case SafeChdirFailNotDir:

     case SafeChdirFailChdirFailed:

       error (0, (*__errno_location ()), "%s", pathname);

       state.exit_status = 1;

       return;

     }

 }





      for (idx=0, namep = name_space; *namep; namep += file_len - pathname_len + 1, ++idx)

 {







   mode_t mode = dirinfo ? dirinfo[idx].type_info : 0;





   file_len = pathname_len + strlen (namep);

   if (file_len > cur_path_size)

     {

       while (file_len > cur_path_size)

  cur_path_size += 1024;

       if (cur_path)

  free (cur_path);

       cur_path = xmalloc (cur_path_size);

       strcpy (cur_path, pathname);

       cur_path[pathname_len - 2] = '/';

     }

   cur_name = cur_path + pathname_len - 1;

   strcpy (cur_name, namep);



   state.curdepth++;

   if (!options.no_leaf_check)

     {

       if (mode && ((((mode)) & 0170000) == (0040000)) && (subdirs_left == 0))

  {

# 1800 "find.c"

    error(0, 0, gettext ("WARNING: Hard link count is wrong for %s: this may be a bug in your filesystem driver.  Automatically turning on find's -noleaf option.  Earlier results may have failed to include directories that should have been searched."),

   parent);

    state.exit_status = 1;

    options.no_leaf_check = 1;



    subdirs_left = 1;

  }

# 1816 "find.c"

       subdirs_left -= process_path (cur_path, cur_name,

         subdirs_left == 0, pathname,

         mode);

     }

   else

     {





       process_path (cur_path, cur_name, 0, pathname, mode);

     }



   state.curdepth--;

 }















      complete_pending_execdirs(eval_tree);





      if (strcmp (name, "."))

 {

   enum SafeChdirStatus status;

   struct dir_id did;

   boolean changed = 0;







   char const *dir;

   boolean deref = following_links() ? 1 : 0;



   if ( (state.curdepth>0) && !deref)

     dir = "..";

   else

     {

       chdir_back ();

       dir = parent;

     }



   status = safely_chdir (dir, TraversingUp, &stat_buf, SymlinkHandleDefault);

   switch (status)

     {

     case SafeChdirOK:

       break;



     case SafeChdirFailWouldBeUnableToReturn:

       error (1, (*__errno_location ()), ".");

       return;



     case SafeChdirFailNonexistent:

     case SafeChdirFailStat:

     case SafeChdirFailSymlink:

     case SafeChdirFailNotDir:

     case SafeChdirFailChdirFailed:

       error (1, (*__errno_location ()), "%s", pathname);

       return;

     }



   if (dir_curr > 0)

     {

       did.dev = dir_ids[dir_curr-1].dev;

       did.ino = dir_ids[dir_curr-1].ino;

     }

   else

     {

       did.dev = starting_stat_buf.st_dev;

       did.ino = starting_stat_buf.st_ino;

     }

 }



      if (cur_path)

 free (cur_path);

      free (name_space);

      free (dirinfo);

    }

}

