process_top_path 

{

  int dirchange;

  char *parent_dir = dir_name(pathname);

  char *base = base_name(pathname);



  state.curdepth = 0;

  state.path_length = strlen (pathname);



  if (0 == strcmp(pathname, parent_dir)

      || 0 == strcmp(parent_dir, "."))

    {

      dirchange = 0;

      base = pathname;

    }

  else

    {

      enum TraversalDirection direction;

      enum SafeChdirStatus chdir_status;

      struct stat st;



      dirchange = 1;

      if (0 == strcmp(base, ".."))

 direction = TraversingUp;

      else

 direction = TraversingDown;

# 1342 "find.c"

      chdir_status = safely_chdir(parent_dir, direction, &st, SymlinkFollowOk);

      if (SafeChdirOK != chdir_status)

 {

   const char *what = (SafeChdirFailWouldBeUnableToReturn == chdir_status) ? "." : parent_dir;

   if ((*__errno_location ()))

     error (0, (*__errno_location ()), "%s", what);

   else

     error (0, 0, "Failed to safely change directory into `%s'",

     parent_dir);





   state.exit_status = 1;

   return;

 }

    }



  free (parent_dir);

  parent_dir = ((void *)0);



  process_path (pathname, base, 0, ".", mode);

  complete_pending_execdirs(eval_tree);



  if (dirchange)

    {

      chdir_back();

    }

}

