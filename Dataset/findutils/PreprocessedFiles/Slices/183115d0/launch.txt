launch 

{

  pid_t child_pid;

  static int first_time = 1;

  struct exec_val *execp = usercontext;



  /* Make sure output of command doesn't get mixed with find output. */

  fflush (stdout);

  fflush (stderr);



  /* Make sure to listen for the kids.  */

  if (first_time)

    {

      first_time = 0;

      signal (SIGCHLD, SIG_DFL);

    }



  child_pid = fork ();

  if (child_pid == -1)

    error (EXIT_FAILURE, errno, _("cannot fork"));

  if (child_pid == 0)

    {

      /* We are the child. */

      assert (NULL != execp->wd_for_exec);

      if (!prep_child_for_exec (execp->close_stdin, execp->wd_for_exec))

	{

	  _exit (1);

	}

      else

	{

	  if (fd_leak_check_is_enabled ())

	    {

	      complain_about_leaky_fds ();

	    }

	}



      if (bc_args_exceed_testing_limit (argv))

	errno = E2BIG;

      else

	execvp (argv[0], argv);

      /* TODO: use a pipe to pass back the errno value, like xargs does */

      error (0, errno, "%s",

	     safely_quote_err_filename (0, argv[0]));

      _exit (1);

    }



  while (waitpid (child_pid, &(execp->last_child_status), 0) == (pid_t) -1)

    {

      if (errno != EINTR)

	{

	  error (0, errno, _("error waiting for %s"),

		 safely_quote_err_filename (0, argv[0]));

	  state.exit_status = 1;

	  return 0;		/* FAIL */

	}

    }



  if (WIFSIGNALED (execp->last_child_status))

    {

      error (0, 0, _("%s terminated by signal %d"),

	     quotearg_n_style (0, options.err_quoting_style, argv[0]),

	     WTERMSIG (execp->last_child_status));



      if (execp->multiple)

	{

	  /* -exec   \; just returns false if the invoked command fails.

	   * -exec {} + returns true if the invoked command fails, but

	   *            sets the program exit status.

	   */

	  state.exit_status = 1;

	}



      return 1;			/* OK */

    }



  if (0 == WEXITSTATUS (execp->last_child_status))

    {

      return 1;			/* OK */

    }

  else

    {

      if (execp->multiple)

	{

	  /* -exec   \; just returns false if the invoked command fails.

	   * -exec {} + returns true if the invoked command fails, but

	   *            sets the program exit status.

	   */

	  state.exit_status = 1;

	}

      /* The child failed, but this is the exec callback.  We

       * don't want to run the child again in this case anwyay.

       */

      return 1;			/* FAIL (but don't try again) */

    }



}

