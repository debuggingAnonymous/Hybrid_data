        -:    0:Source:cut.c
        -:    0:Graph:cut.gcno
        -:    0:Data:cut.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* cut - remove parts of lines of files
        -:    2:   Copyright (C) 1997-2011 Free Software Foundation, Inc.
        -:    3:   Copyright (C) 1984 David M. Ihnat
        -:    4:
        -:    5:   This program is free software: you can redistribute it and/or modify
        -:    6:   it under the terms of the GNU General Public License as published by
        -:    7:   the Free Software Foundation, either version 3 of the License, or
        -:    8:   (at your option) any later version.
        -:    9:
        -:   10:   This program is distributed in the hope that it will be useful,
        -:   11:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   12:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   13:   GNU General Public License for more details.
        -:   14:
        -:   15:   You should have received a copy of the GNU General Public License
        -:   16:   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
        -:   17:
        -:   18:/* Written by David Ihnat.  */
        -:   19:
        -:   20:/* POSIX changes, bug fixes, long-named options, and cleanup
        -:   21:   by David MacKenzie <djm@gnu.ai.mit.edu>.
        -:   22:
        -:   23:   Rewrite cut_fields and cut_bytes -- Jim Meyering.  */
        -:   24:
        -:   25:#include <config.h>
        -:   26:
        -:   27:#include <stdio.h>
        -:   28:#include <assert.h>
        -:   29:#include <getopt.h>
        -:   30:#include <sys/types.h>
        -:   31:#include "system.h"
        -:   32:
        -:   33:#include "error.h"
        -:   34:#include "fadvise.h"
        -:   35:#include "getndelim2.h"
        -:   36:#include "hash.h"
        -:   37:#include "quote.h"
        -:   38:#include "xstrndup.h"
        -:   39:
        -:   40:/* The official name of this program (e.g., no `g' prefix).  */
        -:   41:#define PROGRAM_NAME "cut"
        -:   42:
        -:   43:#define AUTHORS \
        -:   44:  proper_name ("David M. Ihnat"), \
        -:   45:  proper_name ("David MacKenzie"), \
        -:   46:  proper_name ("Jim Meyering")
        -:   47:
        -:   48:#define FATAL_ERROR(Message)						\
        -:   49:  do									\
        -:   50:    {									\
        -:   51:      error (0, 0, (Message));						\
        -:   52:      usage (EXIT_FAILURE);						\
        -:   53:    }									\
        -:   54:  while (0)
        -:   55:
        -:   56:/* Append LOW, HIGH to the list RP of range pairs, allocating additional
        -:   57:   space if necessary.  Update local variable N_RP.  When allocating,
        -:   58:   update global variable N_RP_ALLOCATED.  */
        -:   59:
        -:   60:#define ADD_RANGE_PAIR(rp, low, high)			\
        -:   61:  do							\
        -:   62:    {							\
        -:   63:      if (low == 0 || high == 0)			\
        -:   64:        FATAL_ERROR (_("fields and positions are numbered from 1")); \
        -:   65:      if (n_rp >= n_rp_allocated)			\
        -:   66:        {						\
        -:   67:          (rp) = X2NREALLOC (rp, &n_rp_allocated);	\
        -:   68:        }						\
        -:   69:      rp[n_rp].lo = (low);				\
        -:   70:      rp[n_rp].hi = (high);				\
        -:   71:      ++n_rp;						\
        -:   72:    }							\
        -:   73:  while (0)
        -:   74:
        -:   75:struct range_pair
        -:   76:  {
        -:   77:    size_t lo;
        -:   78:    size_t hi;
        -:   79:  };
        -:   80:
        -:   81:/* This buffer is used to support the semantics of the -s option
        -:   82:   (or lack of same) when the specified field list includes (does
        -:   83:   not include) the first field.  In both of those cases, the entire
        -:   84:   first field must be read into this buffer to determine whether it
        -:   85:   is followed by a delimiter or a newline before any of it may be
        -:   86:   output.  Otherwise, cut_fields can do the job without using this
        -:   87:   buffer.  */
        -:   88:static char *field_1_buffer;
        -:   89:
        -:   90:/* The number of bytes allocated for FIELD_1_BUFFER.  */
        -:   91:static size_t field_1_bufsize;
        -:   92:
        -:   93:/* The largest field or byte index used as an endpoint of a closed
        -:   94:   or degenerate range specification;  this doesn't include the starting
        -:   95:   index of right-open-ended ranges.  For example, with either range spec
        -:   96:   `2-5,9-', `2-3,5,9-' this variable would be set to 5.  */
        -:   97:static size_t max_range_endpoint;
        -:   98:
        -:   99:/* If nonzero, this is the index of the first field in a range that goes
        -:  100:   to end of line. */
        -:  101:static size_t eol_range_start;
        -:  102:
        -:  103:/* This is a bit vector.
        -:  104:   In byte mode, which bytes to output.
        -:  105:   In field mode, which DELIM-separated fields to output.
        -:  106:   Both bytes and fields are numbered starting with 1,
        -:  107:   so the zeroth bit of this array is unused.
        -:  108:   A field or byte K has been selected if
        -:  109:   (K <= MAX_RANGE_ENDPOINT and is_printable_field(K))
        -:  110:    || (EOL_RANGE_START > 0 && K >= EOL_RANGE_START).  */
        -:  111:static unsigned char *printable_field;
        -:  112:
        -:  113:enum operating_mode
        -:  114:  {
        -:  115:    undefined_mode,
        -:  116:
        -:  117:    /* Output characters that are in the given bytes. */
        -:  118:    byte_mode,
        -:  119:
        -:  120:    /* Output the given delimeter-separated fields. */
        -:  121:    field_mode
        -:  122:  };
        -:  123:
        -:  124:static enum operating_mode operating_mode;
        -:  125:
        -:  126:/* If true do not output lines containing no delimeter characters.
        -:  127:   Otherwise, all such lines are printed.  This option is valid only
        -:  128:   with field mode.  */
        -:  129:static bool suppress_non_delimited;
        -:  130:
        -:  131:/* If nonzero, print all bytes, characters, or fields _except_
        -:  132:   those that were specified.  */
        -:  133:static bool complement;
        -:  134:
        -:  135:/* The delimeter character for field mode. */
        -:  136:static unsigned char delim;
        -:  137:
        -:  138:/* True if the --output-delimiter=STRING option was specified.  */
        -:  139:static bool output_delimiter_specified;
        -:  140:
        -:  141:/* The length of output_delimiter_string.  */
        -:  142:static size_t output_delimiter_length;
        -:  143:
        -:  144:/* The output field separator string.  Defaults to the 1-character
        -:  145:   string consisting of the input delimiter.  */
        -:  146:static char *output_delimiter_string;
        -:  147:
        -:  148:/* True if we have ever read standard input. */
        -:  149:static bool have_read_stdin;
        -:  150:
        -:  151:#define HT_RANGE_START_INDEX_INITIAL_CAPACITY 31
        -:  152:
        -:  153:/* The set of range-start indices.  For example, given a range-spec list like
        -:  154:   `-b1,3-5,4-9,15-', the following indices will be recorded here: 1, 3, 15.
        -:  155:   Note that although `4' looks like a range-start index, it is in the middle
        -:  156:   of the `3-5' range, so it doesn't count.
        -:  157:   This table is created/used IFF output_delimiter_specified is set.  */
        -:  158:static Hash_table *range_start_ht;
        -:  159:
        -:  160:/* For long options that have no equivalent short option, use a
        -:  161:   non-character as a pseudo short option, starting with CHAR_MAX + 1.  */
        -:  162:enum
        -:  163:{
        -:  164:  OUTPUT_DELIMITER_OPTION = CHAR_MAX + 1,
        -:  165:  COMPLEMENT_OPTION
        -:  166:};
        -:  167:
        -:  168:static struct option const longopts[] =
        -:  169:{
        -:  170:  {"bytes", required_argument, NULL, 'b'},
        -:  171:  {"characters", required_argument, NULL, 'c'},
        -:  172:  {"fields", required_argument, NULL, 'f'},
        -:  173:  {"delimiter", required_argument, NULL, 'd'},
        -:  174:  {"only-delimited", no_argument, NULL, 's'},
        -:  175:  {"output-delimiter", required_argument, NULL, OUTPUT_DELIMITER_OPTION},
        -:  176:  {"complement", no_argument, NULL, COMPLEMENT_OPTION},
        -:  177:  {GETOPT_HELP_OPTION_DECL},
        -:  178:  {GETOPT_VERSION_OPTION_DECL},
        -:  179:  {NULL, 0, NULL, 0}
        -:  180:};
        -:  181:
        -:  182:void
    #####:  183:usage (int status)
        -:  184:{
    #####:  185:  if (status != EXIT_SUCCESS)
    #####:  186:    fprintf (stderr, _("Try `%s --help' for more information.\n"),
        -:  187:             program_name);
        -:  188:  else
        -:  189:    {
    #####:  190:      printf (_("\
        -:  191:Usage: %s OPTION... [FILE]...\n\
        -:  192:"),
        -:  193:              program_name);
    #####:  194:      fputs (_("\
        -:  195:Print selected parts of lines from each FILE to standard output.\n\
        -:  196:\n\
        -:  197:"), stdout);
    #####:  198:      fputs (_("\
        -:  199:Mandatory arguments to long options are mandatory for short options too.\n\
        -:  200:"), stdout);
    #####:  201:      fputs (_("\
        -:  202:  -b, --bytes=LIST        select only these bytes\n\
        -:  203:  -c, --characters=LIST   select only these characters\n\
        -:  204:  -d, --delimiter=DELIM   use DELIM instead of TAB for field delimiter\n\
        -:  205:"), stdout);
    #####:  206:      fputs (_("\
        -:  207:  -f, --fields=LIST       select only these fields;  also print any line\n\
        -:  208:                            that contains no delimiter character, unless\n\
        -:  209:                            the -s option is specified\n\
        -:  210:  -n                      (ignored)\n\
        -:  211:"), stdout);
    #####:  212:      fputs (_("\
        -:  213:      --complement        complement the set of selected bytes, characters\n\
        -:  214:                            or fields\n\
        -:  215:"), stdout);
    #####:  216:      fputs (_("\
        -:  217:  -s, --only-delimited    do not print lines not containing delimiters\n\
        -:  218:      --output-delimiter=STRING  use STRING as the output delimiter\n\
        -:  219:                            the default is to use the input delimiter\n\
        -:  220:"), stdout);
    #####:  221:      fputs (HELP_OPTION_DESCRIPTION, stdout);
    #####:  222:      fputs (VERSION_OPTION_DESCRIPTION, stdout);
    #####:  223:      fputs (_("\
        -:  224:\n\
        -:  225:Use one, and only one of -b, -c or -f.  Each LIST is made up of one\n\
        -:  226:range, or many ranges separated by commas.  Selected input is written\n\
        -:  227:in the same order that it is read, and is written exactly once.\n\
        -:  228:"), stdout);
    #####:  229:      fputs (_("\
        -:  230:Each range is one of:\n\
        -:  231:\n\
        -:  232:  N     N'th byte, character or field, counted from 1\n\
        -:  233:  N-    from N'th byte, character or field, to end of line\n\
        -:  234:  N-M   from N'th to M'th (included) byte, character or field\n\
        -:  235:  -M    from first to M'th (included) byte, character or field\n\
        -:  236:\n\
        -:  237:With no FILE, or when FILE is -, read standard input.\n\
        -:  238:"), stdout);
    #####:  239:      emit_ancillary_info ();
        -:  240:    }
    #####:  241:  exit (status);
        -:  242:}
        -:  243:
        -:  244:static inline void
    #####:  245:mark_range_start (size_t i)
        -:  246:{
        -:  247:  /* Record the fact that `i' is a range-start index.  */
    #####:  248:  void *ent_from_table = hash_insert (range_start_ht, (void*) i);
    #####:  249:  if (ent_from_table == NULL)
        -:  250:    {
        -:  251:      /* Insertion failed due to lack of memory.  */
    #####:  252:      xalloc_die ();
        -:  253:    }
    #####:  254:  assert ((size_t) ent_from_table == i);
    #####:  255:}
        -:  256:
        -:  257:static inline void
    #####:  258:mark_printable_field (size_t i)
        -:  259:{
    #####:  260:  size_t n = i / CHAR_BIT;
    #####:  261:  printable_field[n] |= (1 << (i % CHAR_BIT));
    #####:  262:}
        -:  263:
        -:  264:static inline bool
    #####:  265:is_printable_field (size_t i)
        -:  266:{
    #####:  267:  size_t n = i / CHAR_BIT;
    #####:  268:  return (printable_field[n] >> (i % CHAR_BIT)) & 1;
        -:  269:}
        -:  270:
        -:  271:static size_t
    #####:  272:hash_int (const void *x, size_t tablesize)
        -:  273:{
        -:  274:#ifdef UINTPTR_MAX
    #####:  275:  uintptr_t y = (uintptr_t) x;
        -:  276:#else
        -:  277:  size_t y = (size_t) x;
        -:  278:#endif
    #####:  279:  return y % tablesize;
        -:  280:}
        -:  281:
        -:  282:static bool
    #####:  283:hash_compare_ints (void const *x, void const *y)
        -:  284:{
    #####:  285:  return (x == y) ? true : false;
        -:  286:}
        -:  287:
        -:  288:static bool
    #####:  289:is_range_start_index (size_t i)
        -:  290:{
    #####:  291:  return hash_lookup (range_start_ht, (void *) i) ? true : false;
        -:  292:}
        -:  293:
        -:  294:/* Return nonzero if the K'th field or byte is printable.
        -:  295:   When returning nonzero, if RANGE_START is non-NULL,
        -:  296:   set *RANGE_START to true if K is the beginning of a range, and to
        -:  297:   false otherwise.  */
        -:  298:
        -:  299:static bool
    #####:  300:print_kth (size_t k, bool *range_start)
        -:  301:{
    #####:  302:  bool k_selected
    #####:  303:    = ((0 < eol_range_start && eol_range_start <= k)
    #####:  304:       || (k <= max_range_endpoint && is_printable_field (k)));
        -:  305:
    #####:  306:  bool is_selected = k_selected ^ complement;
    #####:  307:  if (range_start && is_selected)
    #####:  308:    *range_start = is_range_start_index (k);
        -:  309:
    #####:  310:  return is_selected;
        -:  311:}
        -:  312:
        -:  313:/* Comparison function for qsort to order the list of
        -:  314:   struct range_pairs.  */
        -:  315:static int
    #####:  316:compare_ranges (const void *a, const void *b)
        -:  317:{
    #####:  318:  int a_start = ((const struct range_pair *) a)->lo;
    #####:  319:  int b_start = ((const struct range_pair *) b)->lo;
    #####:  320:  return a_start < b_start ? -1 : a_start > b_start;
        -:  321:}
        -:  322:
        -:  323:/* Given the list of field or byte range specifications FIELDSTR, set
        -:  324:   MAX_RANGE_ENDPOINT and allocate and initialize the PRINTABLE_FIELD
        -:  325:   array.  If there is a right-open-ended range, set EOL_RANGE_START
        -:  326:   to its starting index.  FIELDSTR should be composed of one or more
        -:  327:   numbers or ranges of numbers, separated by blanks or commas.
        -:  328:   Incomplete ranges may be given: `-m' means `1-m'; `n-' means `n'
        -:  329:   through end of line.  Return true if FIELDSTR contains at least
        -:  330:   one field specification, false otherwise.  */
        -:  331:
        -:  332:/* FIXME-someday:  What if the user wants to cut out the 1,000,000-th
        -:  333:   field of some huge input file?  This function shouldn't have to
        -:  334:   allocate a table of a million bits just so we can test every
        -:  335:   field < 10^6 with an array dereference.  Instead, consider using
        -:  336:   an adaptive approach: if the range of selected fields is too large,
        -:  337:   but only a few fields/byte-offsets are actually selected, use a
        -:  338:   hash table.  If the range of selected fields is too large, and
        -:  339:   too many are selected, then resort to using the range-pairs (the
        -:  340:   `rp' array) directly.  */
        -:  341:
        -:  342:static bool
        1:  343:set_fields (const char *fieldstr)
        -:  344:{
        1:  345:  size_t initial = 1;		/* Value of first number in a range.  */
        1:  346:  size_t value = 0;		/* If nonzero, a number being accumulated.  */
        1:  347:  bool lhs_specified = false;
        1:  348:  bool rhs_specified = false;
        1:  349:  bool dash_found = false;	/* True if a '-' is found in this field.  */
        1:  350:  bool field_found = false;	/* True if at least one field spec
        -:  351:                                   has been processed.  */
        -:  352:
        1:  353:  struct range_pair *rp = NULL;
        1:  354:  size_t n_rp = 0;
        1:  355:  size_t n_rp_allocated = 0;
        -:  356:  size_t i;
        1:  357:  bool in_digits = false;
        -:  358:
        -:  359:  /* Collect and store in RP the range end points.
        -:  360:     It also sets EOL_RANGE_START if appropriate.  */
        -:  361:
        -:  362:  while (true)
        -:  363:    {
       12:  364:      if (*fieldstr == '-')
        -:  365:        {
        1:  366:          in_digits = false;
        -:  367:          /* Starting a range. */
        1:  368:          if (dash_found)
    #####:  369:            FATAL_ERROR (_("invalid byte or field list"));
        1:  370:          dash_found = true;
        1:  371:          fieldstr++;
        -:  372:
        1:  373:          initial = (lhs_specified ? value : 1);
        1:  374:          value = 0;
        -:  375:        }
       22:  376:      else if (*fieldstr == ',' ||
       22:  377:               isblank (to_uchar (*fieldstr)) || *fieldstr == '\0')
        -:  378:        {
        1:  379:          in_digits = false;
        -:  380:          /* Ending the string, or this field/byte sublist. */
        1:  381:          if (dash_found)
        -:  382:            {
        1:  383:              dash_found = false;
        -:  384:
        1:  385:              if (!lhs_specified && !rhs_specified)
    #####:  386:                FATAL_ERROR (_("invalid range with no endpoint: -"));
        -:  387:
        -:  388:              /* A range.  Possibilities: -n, m-n, n-.
        -:  389:                 In any case, `initial' contains the start of the range. */
        1:  390:              if (!rhs_specified)
        -:  391:                {
        -:  392:                  /* `n-'.  From `initial' to end of line. */
        1:  393:                  eol_range_start = initial;
        1:  394:                  field_found = true;
        -:  395:                }
        -:  396:              else
        -:  397:                {
        -:  398:                  /* `m-n' or `-n' (1-n). */
    #####:  399:                  if (value < initial)
    #####:  400:                    FATAL_ERROR (_("invalid decreasing range"));
        -:  401:
        -:  402:                  /* Is there already a range going to end of line? */
    #####:  403:                  if (eol_range_start != 0)
        -:  404:                    {
        -:  405:                      /* Yes.  Is the new sequence already contained
        -:  406:                         in the old one?  If so, no processing is
        -:  407:                         necessary. */
    #####:  408:                      if (initial < eol_range_start)
        -:  409:                        {
        -:  410:                          /* No, the new sequence starts before the
        -:  411:                             old.  Does the old range going to end of line
        -:  412:                             extend into the new range?  */
    #####:  413:                          if (eol_range_start <= value)
        -:  414:                            {
        -:  415:                              /* Yes.  Simply move the end of line marker. */
    #####:  416:                              eol_range_start = initial;
        -:  417:                            }
        -:  418:                          else
        -:  419:                            {
        -:  420:                              /* No.  A simple range, before and disjoint from
        -:  421:                                 the range going to end of line.  Fill it. */
    #####:  422:                              ADD_RANGE_PAIR (rp, initial, value);
        -:  423:                            }
        -:  424:
        -:  425:                          /* In any case, some fields were selected. */
    #####:  426:                          field_found = true;
        -:  427:                        }
        -:  428:                    }
        -:  429:                  else
        -:  430:                    {
        -:  431:                      /* There is no range going to end of line. */
    #####:  432:                      ADD_RANGE_PAIR (rp, initial, value);
    #####:  433:                      field_found = true;
        -:  434:                    }
    #####:  435:                  value = 0;
        -:  436:                }
        -:  437:            }
        -:  438:          else
        -:  439:            {
        -:  440:              /* A simple field number, not a range. */
    #####:  441:              ADD_RANGE_PAIR (rp, value, value);
    #####:  442:              value = 0;
    #####:  443:              field_found = true;
        -:  444:            }
        -:  445:
        1:  446:          if (*fieldstr == '\0')
        -:  447:            {
        1:  448:              break;
        -:  449:            }
        -:  450:
    #####:  451:          fieldstr++;
    #####:  452:          lhs_specified = false;
    #####:  453:          rhs_specified = false;
        -:  454:        }
       10:  455:      else if (ISDIGIT (*fieldstr))
        -:  456:        {
        -:  457:          /* Record beginning of digit string, in case we have to
        -:  458:             complain about it.  */
        -:  459:          static char const *num_start;
       10:  460:          if (!in_digits || !num_start)
        1:  461:            num_start = fieldstr;
       10:  462:          in_digits = true;
        -:  463:
       10:  464:          if (dash_found)
    #####:  465:            rhs_specified = 1;
        -:  466:          else
       10:  467:            lhs_specified = 1;
        -:  468:
        -:  469:          /* Detect overflow.  */
       10:  470:          if (!DECIMAL_DIGIT_ACCUMULATE (value, *fieldstr - '0', size_t))
        -:  471:            {
        -:  472:              /* In case the user specified -c$(echo 2^64|bc),22,
        -:  473:                 complain only about the first number.  */
        -:  474:              /* Determine the length of the offending number.  */
    #####:  475:              size_t len = strspn (num_start, "0123456789");
    #####:  476:              char *bad_num = xstrndup (num_start, len);
    #####:  477:              if (operating_mode == byte_mode)
    #####:  478:                error (0, 0,
        -:  479:                       _("byte offset %s is too large"), quote (bad_num));
        -:  480:              else
    #####:  481:                error (0, 0,
        -:  482:                       _("field number %s is too large"), quote (bad_num));
    #####:  483:              free (bad_num);
    #####:  484:              exit (EXIT_FAILURE);
        -:  485:            }
        -:  486:
       10:  487:          fieldstr++;
        -:  488:        }
        -:  489:      else
    #####:  490:        FATAL_ERROR (_("invalid byte or field list"));
       11:  491:    }
        -:  492:
        1:  493:  max_range_endpoint = 0;
        1:  494:  for (i = 0; i < n_rp; i++)
        -:  495:    {
    #####:  496:      if (rp[i].hi > max_range_endpoint)
    #####:  497:        max_range_endpoint = rp[i].hi;
        -:  498:    }
        -:  499:
        -:  500:  /* Allocate an array large enough so that it may be indexed by
        -:  501:     the field numbers corresponding to all finite ranges
        -:  502:     (i.e. `2-6' or `-4', but not `5-') in FIELDSTR.  */
        -:  503:
        1:  504:  printable_field = xzalloc (max_range_endpoint / CHAR_BIT + 1);
        -:  505:
        1:  506:  qsort (rp, n_rp, sizeof (rp[0]), compare_ranges);
        -:  507:
        -:  508:  /* Set the array entries corresponding to integers in the ranges of RP.  */
        1:  509:  for (i = 0; i < n_rp; i++)
        -:  510:    {
        -:  511:      size_t j;
        -:  512:      size_t rsi_candidate;
        -:  513:
        -:  514:      /* Record the range-start indices, i.e., record each start
        -:  515:         index that is not part of any other (lo..hi] range.  */
    #####:  516:      rsi_candidate = complement ? rp[i].hi + 1 : rp[i].lo;
    #####:  517:      if (output_delimiter_specified
    #####:  518:          && !is_printable_field (rsi_candidate))
    #####:  519:        mark_range_start (rsi_candidate);
        -:  520:
    #####:  521:      for (j = rp[i].lo; j <= rp[i].hi; j++)
    #####:  522:        mark_printable_field (j);
        -:  523:    }
        -:  524:
        1:  525:  if (output_delimiter_specified
        1:  526:      && !complement
        1:  527:      && eol_range_start && !is_printable_field (eol_range_start))
    #####:  528:    mark_range_start (eol_range_start);
        -:  529:
    #####:  530:  free (rp);
        -:  531:
    #####:  532:  return field_found;
        -:  533:}
        -:  534:
        -:  535:/* Read from stream STREAM, printing to standard output any selected bytes.  */
        -:  536:
        -:  537:static void
    #####:  538:cut_bytes (FILE *stream)
        -:  539:{
        -:  540:  size_t byte_idx;	/* Number of bytes in the line so far. */
        -:  541:  /* Whether to begin printing delimiters between ranges for the current line.
        -:  542:     Set after we've begun printing data corresponding to the first range.  */
        -:  543:  bool print_delimiter;
        -:  544:
    #####:  545:  byte_idx = 0;
    #####:  546:  print_delimiter = false;
        -:  547:  while (1)
        -:  548:    {
        -:  549:      int c;		/* Each character from the file. */
        -:  550:
    #####:  551:      c = getc (stream);
        -:  552:
    #####:  553:      if (c == '\n')
        -:  554:        {
    #####:  555:          putchar ('\n');
    #####:  556:          byte_idx = 0;
    #####:  557:          print_delimiter = false;
        -:  558:        }
    #####:  559:      else if (c == EOF)
        -:  560:        {
    #####:  561:          if (byte_idx > 0)
    #####:  562:            putchar ('\n');
    #####:  563:          break;
        -:  564:        }
        -:  565:      else
        -:  566:        {
        -:  567:          bool range_start;
    #####:  568:          bool *rs = output_delimiter_specified ? &range_start : NULL;
    #####:  569:          if (print_kth (++byte_idx, rs))
        -:  570:            {
    #####:  571:              if (rs && *rs && print_delimiter)
        -:  572:                {
    #####:  573:                  fwrite (output_delimiter_string, sizeof (char),
        -:  574:                          output_delimiter_length, stdout);
        -:  575:                }
    #####:  576:              print_delimiter = true;
    #####:  577:              putchar (c);
        -:  578:            }
        -:  579:        }
    #####:  580:    }
    #####:  581:}
        -:  582:
        -:  583:/* Read from stream STREAM, printing to standard output any selected fields.  */
        -:  584:
        -:  585:static void
    #####:  586:cut_fields (FILE *stream)
        -:  587:{
        -:  588:  int c;
    #####:  589:  size_t field_idx = 1;
    #####:  590:  bool found_any_selected_field = false;
        -:  591:  bool buffer_first_field;
        -:  592:
    #####:  593:  c = getc (stream);
    #####:  594:  if (c == EOF)
    #####:  595:    return;
        -:  596:
    #####:  597:  ungetc (c, stream);
        -:  598:
        -:  599:  /* To support the semantics of the -s flag, we may have to buffer
        -:  600:     all of the first field to determine whether it is `delimited.'
        -:  601:     But that is unnecessary if all non-delimited lines must be printed
        -:  602:     and the first field has been selected, or if non-delimited lines
        -:  603:     must be suppressed and the first field has *not* been selected.
        -:  604:     That is because a non-delimited line has exactly one field.  */
    #####:  605:  buffer_first_field = (suppress_non_delimited ^ !print_kth (1, NULL));
        -:  606:
        -:  607:  while (1)
        -:  608:    {
    #####:  609:      if (field_idx == 1 && buffer_first_field)
        -:  610:        {
        -:  611:          ssize_t len;
        -:  612:          size_t n_bytes;
        -:  613:
    #####:  614:          len = getndelim2 (&field_1_buffer, &field_1_bufsize, 0,
        -:  615:                            GETNLINE_NO_LIMIT, delim, '\n', stream);
    #####:  616:          if (len < 0)
        -:  617:            {
    #####:  618:              free (field_1_buffer);
    #####:  619:              field_1_buffer = NULL;
    #####:  620:              if (ferror (stream) || feof (stream))
        -:  621:                break;
    #####:  622:              xalloc_die ();
        -:  623:            }
        -:  624:
    #####:  625:          n_bytes = len;
    #####:  626:          assert (n_bytes != 0);
        -:  627:
        -:  628:          /* If the first field extends to the end of line (it is not
        -:  629:             delimited) and we are printing all non-delimited lines,
        -:  630:             print this one.  */
    #####:  631:          if (to_uchar (field_1_buffer[n_bytes - 1]) != delim)
        -:  632:            {
    #####:  633:              if (suppress_non_delimited)
        -:  634:                {
        -:  635:                  /* Empty.  */
        -:  636:                }
        -:  637:              else
        -:  638:                {
    #####:  639:                  fwrite (field_1_buffer, sizeof (char), n_bytes, stdout);
        -:  640:                  /* Make sure the output line is newline terminated.  */
    #####:  641:                  if (field_1_buffer[n_bytes - 1] != '\n')
    #####:  642:                    putchar ('\n');
        -:  643:                }
    #####:  644:              continue;
        -:  645:            }
    #####:  646:          if (print_kth (1, NULL))
        -:  647:            {
        -:  648:              /* Print the field, but not the trailing delimiter.  */
    #####:  649:              fwrite (field_1_buffer, sizeof (char), n_bytes - 1, stdout);
    #####:  650:              found_any_selected_field = true;
        -:  651:            }
    #####:  652:          ++field_idx;
        -:  653:        }
        -:  654:
    #####:  655:      if (c != EOF)
        -:  656:        {
    #####:  657:          if (print_kth (field_idx, NULL))
        -:  658:            {
    #####:  659:              if (found_any_selected_field)
        -:  660:                {
    #####:  661:                  fwrite (output_delimiter_string, sizeof (char),
        -:  662:                          output_delimiter_length, stdout);
        -:  663:                }
    #####:  664:              found_any_selected_field = true;
        -:  665:
    #####:  666:              while ((c = getc (stream)) != delim && c != '\n' && c != EOF)
        -:  667:                {
    #####:  668:                  putchar (c);
        -:  669:                }
        -:  670:            }
        -:  671:          else
        -:  672:            {
    #####:  673:              while ((c = getc (stream)) != delim && c != '\n' && c != EOF)
        -:  674:                {
        -:  675:                  /* Empty.  */
        -:  676:                }
        -:  677:            }
        -:  678:        }
        -:  679:
    #####:  680:      if (c == '\n')
        -:  681:        {
    #####:  682:          c = getc (stream);
    #####:  683:          if (c != EOF)
        -:  684:            {
    #####:  685:              ungetc (c, stream);
    #####:  686:              c = '\n';
        -:  687:            }
        -:  688:        }
        -:  689:
    #####:  690:      if (c == delim)
    #####:  691:        ++field_idx;
    #####:  692:      else if (c == '\n' || c == EOF)
        -:  693:        {
    #####:  694:          if (found_any_selected_field
    #####:  695:              || !(suppress_non_delimited && field_idx == 1))
    #####:  696:            putchar ('\n');
    #####:  697:          if (c == EOF)
    #####:  698:            break;
    #####:  699:          field_idx = 1;
    #####:  700:          found_any_selected_field = false;
        -:  701:        }
    #####:  702:    }
        -:  703:}
        -:  704:
        -:  705:static void
    #####:  706:cut_stream (FILE *stream)
        -:  707:{
    #####:  708:  if (operating_mode == byte_mode)
    #####:  709:    cut_bytes (stream);
        -:  710:  else
    #####:  711:    cut_fields (stream);
    #####:  712:}
        -:  713:
        -:  714:/* Process file FILE to standard output.
        -:  715:   Return true if successful.  */
        -:  716:
        -:  717:static bool
    #####:  718:cut_file (char const *file)
        -:  719:{
        -:  720:  FILE *stream;
        -:  721:
    #####:  722:  if (STREQ (file, "-"))
        -:  723:    {
    #####:  724:      have_read_stdin = true;
    #####:  725:      stream = stdin;
        -:  726:    }
        -:  727:  else
        -:  728:    {
    #####:  729:      stream = fopen (file, "r");
    #####:  730:      if (stream == NULL)
        -:  731:        {
    #####:  732:          error (0, errno, "%s", file);
    #####:  733:          return false;
        -:  734:        }
        -:  735:    }
        -:  736:
    #####:  737:  fadvise (stream, FADVISE_SEQUENTIAL);
        -:  738:
    #####:  739:  cut_stream (stream);
        -:  740:
    #####:  741:  if (ferror (stream))
        -:  742:    {
    #####:  743:      error (0, errno, "%s", file);
    #####:  744:      return false;
        -:  745:    }
    #####:  746:  if (STREQ (file, "-"))
    #####:  747:    clearerr (stream);		/* Also clear EOF. */
    #####:  748:  else if (fclose (stream) == EOF)
        -:  749:    {
    #####:  750:      error (0, errno, "%s", file);
    #####:  751:      return false;
        -:  752:    }
    #####:  753:  return true;
        -:  754:}
        -:  755:
        -:  756:int
        1:  757:main (int argc, char **argv)
        -:  758:{
        -:  759:  int optc;
        -:  760:  bool ok;
        1:  761:  bool delim_specified = false;
        -:  762:  char *spec_list_string IF_LINT ( = NULL);
        -:  763:
        -:  764:  initialize_main (&argc, &argv);
        1:  765:  set_program_name (argv[0]);
        1:  766:  setlocale (LC_ALL, "");
        -:  767:  bindtextdomain (PACKAGE, LOCALEDIR);
        -:  768:  textdomain (PACKAGE);
        -:  769:
        1:  770:  atexit (close_stdout);
        -:  771:
        1:  772:  operating_mode = undefined_mode;
        -:  773:
        -:  774:  /* By default, all non-delimited lines are printed.  */
        1:  775:  suppress_non_delimited = false;
        -:  776:
        1:  777:  delim = '\0';
        1:  778:  have_read_stdin = false;
        -:  779:
        4:  780:  while ((optc = getopt_long (argc, argv, "b:c:d:f:ns", longopts, NULL)) != -1)
        -:  781:    {
        2:  782:      switch (optc)
        -:  783:        {
        -:  784:        case 'b':
        -:  785:        case 'c':
        -:  786:          /* Build the byte list. */
        1:  787:          if (operating_mode != undefined_mode)
    #####:  788:            FATAL_ERROR (_("only one type of list may be specified"));
        1:  789:          operating_mode = byte_mode;
        1:  790:          spec_list_string = optarg;
        1:  791:          break;
        -:  792:
        -:  793:        case 'f':
        -:  794:          /* Build the field list. */
    #####:  795:          if (operating_mode != undefined_mode)
    #####:  796:            FATAL_ERROR (_("only one type of list may be specified"));
    #####:  797:          operating_mode = field_mode;
    #####:  798:          spec_list_string = optarg;
    #####:  799:          break;
        -:  800:
        -:  801:        case 'd':
        -:  802:          /* New delimiter. */
        -:  803:          /* Interpret -d '' to mean `use the NUL byte as the delimiter.'  */
    #####:  804:          if (optarg[0] != '\0' && optarg[1] != '\0')
    #####:  805:            FATAL_ERROR (_("the delimiter must be a single character"));
    #####:  806:          delim = optarg[0];
    #####:  807:          delim_specified = true;
    #####:  808:          break;
        -:  809:
        -:  810:        case OUTPUT_DELIMITER_OPTION:
        1:  811:          output_delimiter_specified = true;
        -:  812:          /* Interpret --output-delimiter='' to mean
        -:  813:             `use the NUL byte as the delimiter.'  */
        2:  814:          output_delimiter_length = (optarg[0] == '\0'
        1:  815:                                     ? 1 : strlen (optarg));
        1:  816:          output_delimiter_string = xstrdup (optarg);
        1:  817:          break;
        -:  818:
        -:  819:        case 'n':
    #####:  820:          break;
        -:  821:
        -:  822:        case 's':
    #####:  823:          suppress_non_delimited = true;
    #####:  824:          break;
        -:  825:
        -:  826:        case COMPLEMENT_OPTION:
    #####:  827:          complement = true;
    #####:  828:          break;
        -:  829:
    #####:  830:        case_GETOPT_HELP_CHAR;
        -:  831:
    #####:  832:        case_GETOPT_VERSION_CHAR (PROGRAM_NAME, AUTHORS);
        -:  833:
        -:  834:        default:
    #####:  835:          usage (EXIT_FAILURE);
        -:  836:        }
        -:  837:    }
        -:  838:
        1:  839:  if (operating_mode == undefined_mode)
    #####:  840:    FATAL_ERROR (_("you must specify a list of bytes, characters, or fields"));
        -:  841:
        1:  842:  if (delim != '\0' && operating_mode != field_mode)
    #####:  843:    FATAL_ERROR (_("an input delimiter may be specified only\
        -:  844: when operating on fields"));
        -:  845:
        1:  846:  if (suppress_non_delimited && operating_mode != field_mode)
    #####:  847:    FATAL_ERROR (_("suppressing non-delimited lines makes sense\n\
        -:  848:\tonly when operating on fields"));
        -:  849:
        1:  850:  if (output_delimiter_specified)
        -:  851:    {
        1:  852:      range_start_ht = hash_initialize (HT_RANGE_START_INDEX_INITIAL_CAPACITY,
        -:  853:                                        NULL, hash_int,
        -:  854:                                        hash_compare_ints, NULL);
        1:  855:      if (range_start_ht == NULL)
    #####:  856:        xalloc_die ();
        -:  857:
        -:  858:    }
        -:  859:
        1:  860:  if (! set_fields (spec_list_string))
        -:  861:    {
    #####:  862:      if (operating_mode == field_mode)
    #####:  863:        FATAL_ERROR (_("missing list of fields"));
        -:  864:      else
    #####:  865:        FATAL_ERROR (_("missing list of positions"));
        -:  866:    }
        -:  867:
    #####:  868:  if (!delim_specified)
    #####:  869:    delim = '\t';
        -:  870:
    #####:  871:  if (output_delimiter_string == NULL)
        -:  872:    {
        -:  873:      static char dummy[2];
    #####:  874:      dummy[0] = delim;
    #####:  875:      dummy[1] = '\0';
    #####:  876:      output_delimiter_string = dummy;
    #####:  877:      output_delimiter_length = 1;
        -:  878:    }
        -:  879:
    #####:  880:  if (optind == argc)
    #####:  881:    ok = cut_file ("-");
        -:  882:  else
    #####:  883:    for (ok = true; optind < argc; optind++)
    #####:  884:      ok &= cut_file (argv[optind]);
        -:  885:
    #####:  886:  if (range_start_ht)
    #####:  887:    hash_free (range_start_ht);
        -:  888:
    #####:  889:  if (have_read_stdin && fclose (stdin) == EOF)
        -:  890:    {
    #####:  891:      error (0, errno, "-");
    #####:  892:      ok = false;
        -:  893:    }
        -:  894:
    #####:  895:  exit (ok ? EXIT_SUCCESS : EXIT_FAILURE);
        -:  896:}
