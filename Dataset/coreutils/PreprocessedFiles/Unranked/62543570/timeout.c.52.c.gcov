        -:    0:Source:src/timeout.c
        -:    0:Graph:src/timeout.gcno
        -:    0:Data:src/timeout.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* timeout -- run a command with bounded time
        -:    2:   Copyright (C) 2008-2012 Free Software Foundation, Inc.
        -:    3:
        -:    4:   This program is free software: you can redistribute it and/or modify
        -:    5:   it under the terms of the GNU General Public License as published by
        -:    6:   the Free Software Foundation, either version 3 of the License, or
        -:    7:   (at your option) any later version.
        -:    8:
        -:    9:   This program is distributed in the hope that it will be useful,
        -:   10:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   11:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   12:   GNU General Public License for more details.
        -:   13:
        -:   14:   You should have received a copy of the GNU General Public License
        -:   15:   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
        -:   16:
        -:   17:
        -:   18:/* timeout - Start a command, and kill it if the specified timeout expires
        -:   19:
        -:   20:   We try to behave like a shell starting a single (foreground) job,
        -:   21:   and will kill the job if we receive the alarm signal we setup.
        -:   22:   The exit status of the job is returned, or one of these errors:
        -:   23:     EXIT_TIMEDOUT      124      job timed out
        -:   24:     EXIT_CANCELED      125      internal error
        -:   25:     EXIT_CANNOT_INVOKE 126      error executing job
        -:   26:     EXIT_ENOENT        127      couldn't find job to exec
        -:   27:
        -:   28:   Caveats:
        -:   29:     If user specifies the KILL (9) signal is to be sent on timeout,
        -:   30:     the monitor is killed and so exits with 128+9 rather than 124.
        -:   31:
        -:   32:     If you start a command in the background, which reads from the tty
        -:   33:     and so is immediately sent SIGTTIN to stop, then the timeout
        -:   34:     process will ignore this so it can timeout the command as expected.
        -:   35:     This can be seen with 'timeout 10 dd&' for example.
        -:   36:     However if one brings this group to the foreground with the 'fg'
        -:   37:     command before the timer expires, the command will remain
        -:   38:     in the stop state as the shell doesn't send a SIGCONT
        -:   39:     because the timeout process (group leader) is already running.
        -:   40:     To get the command running again one can Ctrl-Z, and do fg again.
        -:   41:     Note one can Ctrl-C the whole job when in this state.
        -:   42:     I think this could be fixed but I'm not sure the extra
        -:   43:     complication is justified for this scenario.
        -:   44:
        -:   45:   Written by PÃ¡draig Brady.  */
        -:   46:
        -:   47:#include <config.h>
        -:   48:#include <getopt.h>
        -:   49:#include <stdio.h>
        -:   50:#include <sys/types.h>
        -:   51:#include <signal.h>
        -:   52:#if HAVE_PRCTL
        -:   53:# include <sys/prctl.h>
        -:   54:#endif
        -:   55:#include <sys/wait.h>
        -:   56:
        -:   57:#include "system.h"
        -:   58:#include "c-strtod.h"
        -:   59:#include "xstrtod.h"
        -:   60:#include "sig2str.h"
        -:   61:#include "operand2sig.h"
        -:   62:#include "error.h"
        -:   63:#include "quote.h"
        -:   64:
        -:   65:#if HAVE_SETRLIMIT
        -:   66:/* FreeBSD 5.0 at least needs <sys/types.h> and <sys/time.h> included
        -:   67:   before <sys/resource.h>.  Currently "system.h" includes <sys/time.h>.  */
        -:   68:# include <sys/resource.h>
        -:   69:#endif
        -:   70:
        -:   71:/* NonStop circa 2011 lacks both SA_RESTART and siginterrupt.  */
        -:   72:#ifndef SA_RESTART
        -:   73:# define SA_RESTART 0
        -:   74:#endif
        -:   75:
        -:   76:#define PROGRAM_NAME "timeout"
        -:   77:
        -:   78:#define AUTHORS proper_name_utf8 ("Padraig Brady", "P\303\241draig Brady")
        -:   79:
        -:   80:static int timed_out;
        -:   81:static int term_signal = SIGTERM;  /* same default as kill command.  */
        -:   82:static int monitored_pid;
        -:   83:static double kill_after;
        -:   84:static bool foreground;      /* whether to use another program group.  */
        -:   85:static bool preserve_status; /* whether to use a timeout status or not.  */
        -:   86:
        -:   87:/* for long options with no corresponding short option, use enum */
        -:   88:enum
        -:   89:{
        -:   90:      FOREGROUND_OPTION = CHAR_MAX + 1,
        -:   91:      PRESERVE_STATUS_OPTION
        -:   92:};
        -:   93:
        -:   94:static struct option const long_options[] =
        -:   95:{
        -:   96:  {"kill-after", required_argument, NULL, 'k'},
        -:   97:  {"signal", required_argument, NULL, 's'},
        -:   98:  {"foreground", no_argument, NULL, FOREGROUND_OPTION},
        -:   99:  {"preserve-status", no_argument, NULL, PRESERVE_STATUS_OPTION},
        -:  100:  {GETOPT_HELP_OPTION_DECL},
        -:  101:  {GETOPT_VERSION_OPTION_DECL},
        -:  102:  {NULL, 0, NULL, 0}
        -:  103:};
        -:  104:
        -:  105:/* Start the timeout after which we'll receive a SIGALRM.
        -:  106:   Round DURATION up to the next representable value.
        -:  107:   Treat out-of-range values as if they were maximal,
        -:  108:   as that's more useful in practice than reporting an error.
        -:  109:   '0' means don't timeout.  */
        -:  110:static void
        1:  111:settimeout (double duration)
        -:  112:{
        -:  113:/* timer_settime() provides potentially nanosecond resolution.
        -:  114:   setitimer() is more portable (to Darwin for example),
        -:  115:   but only provides microsecond resolution and thus is
        -:  116:   a little more awkward to use with timespecs, as well as being
        -:  117:   deprecated by POSIX.  Instead we fallback to single second
        -:  118:   resolution provided by alarm().  */
        -:  119:
        -:  120:#if HAVE_TIMER_SETTIME
        1:  121:  struct timespec ts = dtotimespec (duration);
        1:  122:  struct itimerspec its = { {0, 0}, ts };
        -:  123:  timer_t timerid;
        1:  124:  if (timer_create (CLOCK_REALTIME, NULL, &timerid) == 0)
        -:  125:    {
        1:  126:      if (timer_settime (timerid, 0, &its, NULL) == 0)
        2:  127:        return;
        -:  128:      else
        -:  129:        {
    #####:  130:          error (0, errno, _("warning: timer_settime"));
    #####:  131:          timer_delete (timerid);
        -:  132:        }
        -:  133:    }
    #####:  134:  else if (errno != ENOSYS)
    #####:  135:    error (0, errno, _("warning: timer_create"));
        -:  136:#endif
        -:  137:
        -:  138:  unsigned int timeint;
    #####:  139:  if (UINT_MAX <= duration)
    #####:  140:    timeint = UINT_MAX;
        -:  141:  else
        -:  142:    {
    #####:  143:      unsigned int duration_floor = duration;
    #####:  144:      timeint = duration_floor + (duration_floor < duration);
        -:  145:    }
    #####:  146:  alarm (timeint);
        -:  147:}
        -:  148:
        -:  149:/* send SIG avoiding the current process.  */
        -:  150:
        -:  151:static int
    #####:  152:send_sig (int where, int sig)
        -:  153:{
        -:  154:  /* If sending to the group, then ignore the signal,
        -:  155:     so we don't go into a signal loop.  Note that this will ignore any of the
        -:  156:     signals registered in install_signal_handlers(), that are sent after we
        -:  157:     propagate the first one, which hopefully won't be an issue.  Note this
        -:  158:     process can be implicitly multithreaded due to some timer_settime()
        -:  159:     implementations, therefore a signal sent to the group, can be sent
        -:  160:     multiple times to this process.  */
    #####:  161:  if (where == 0)
    #####:  162:    signal (sig, SIG_IGN);
    #####:  163:  return kill (where, sig);
        -:  164:}
        -:  165:
        -:  166:static void
    #####:  167:cleanup (int sig)
        -:  168:{
    #####:  169:  if (sig == SIGALRM)
        -:  170:    {
    #####:  171:      timed_out = 1;
    #####:  172:      sig = term_signal;
        -:  173:    }
    #####:  174:  if (monitored_pid)
        -:  175:    {
    #####:  176:      if (kill_after)
        -:  177:        {
        -:  178:          /* Start a new timeout after which we'll send SIGKILL.  */
    #####:  179:          term_signal = SIGKILL;
    #####:  180:          settimeout (kill_after);
    #####:  181:          kill_after = 0; /* Don't let later signals reset kill alarm.  */
        -:  182:        }
        -:  183:
        -:  184:      /* Send the signal directly to the monitored child,
        -:  185:         in case it has itself become group leader,
        -:  186:         or is not running in a separate group.  */
    #####:  187:      send_sig (monitored_pid, sig);
        -:  188:      /* The normal case is the job has remained in our
        -:  189:         newly created process group, so send to all processes in that.  */
    #####:  190:      if (!foreground)
    #####:  191:        send_sig (0, sig);
    #####:  192:      if (sig != SIGKILL && sig != SIGCONT)
        -:  193:        {
    #####:  194:          send_sig (monitored_pid, SIGCONT);
    #####:  195:          if (!foreground)
    #####:  196:            send_sig (0, SIGCONT);
        -:  197:        }
        -:  198:    }
        -:  199:  else /* we're the child or the child is not exec'd yet.  */
    #####:  200:    _exit (128 + sig);
    #####:  201:}
        -:  202:
        -:  203:void
    #####:  204:usage (int status)
        -:  205:{
    #####:  206:  if (status != EXIT_SUCCESS)
    #####:  207:    emit_try_help ();
        -:  208:  else
        -:  209:    {
    #####:  210:      printf (_("\
        -:  211:Usage: %s [OPTION] DURATION COMMAND [ARG]...\n\
        -:  212:  or:  %s [OPTION]\n"), program_name, program_name);
        -:  213:
    #####:  214:      fputs (_("\
        -:  215:Start COMMAND, and kill it if still running after DURATION.\n\
        -:  216:\n\
        -:  217:Mandatory arguments to long options are mandatory for short options too.\n\
        -:  218:"), stdout);
    #####:  219:      fputs (_("\
        -:  220:      --preserve-status\n\
        -:  221:                 exit with the same status as COMMAND, even when the\n\
        -:  222:                 command times out\n\
        -:  223:      --foreground\n\
        -:  224:                 When not running timeout directly from a shell prompt,\n\
        -:  225:                 allow COMMAND to read from the TTY and receive TTY signals.\n\
        -:  226:                 In this mode, children of COMMAND will not be timed out.\n\
        -:  227:  -k, --kill-after=DURATION\n\
        -:  228:                 also send a KILL signal if COMMAND is still running\n\
        -:  229:                 this long after the initial signal was sent.\n\
        -:  230:  -s, --signal=SIGNAL\n\
        -:  231:                 specify the signal to be sent on timeout.\n\
        -:  232:                 SIGNAL may be a name like 'HUP' or a number.\n\
        -:  233:                 See 'kill -l' for a list of signals\n"), stdout);
        -:  234:
    #####:  235:      fputs (HELP_OPTION_DESCRIPTION, stdout);
    #####:  236:      fputs (VERSION_OPTION_DESCRIPTION, stdout);
        -:  237:
    #####:  238:      fputs (_("\n\
        -:  239:DURATION is a floating point number with an optional suffix:\n\
        -:  240:'s' for seconds (the default), 'm' for minutes, 'h' for hours \
        -:  241:or 'd' for days.\n"), stdout);
        -:  242:
    #####:  243:      fputs (_("\n\
        -:  244:If the command times out, and --preserve-status is not set, then exit with\n\
        -:  245:status 124.  Otherwise, exit with the status of COMMAND.  If no signal\n\
        -:  246:is specified, send the TERM signal upon timeout.  The TERM signal kills\n\
        -:  247:any process that does not block or catch that signal.  It may be necessary\n\
        -:  248:to use the KILL (9) signal, since this signal cannot be caught, in which\n\
        -:  249:case the exit status is 128+9 rather than 124.\n"), stdout);
    #####:  250:      emit_ancillary_info ();
        -:  251:    }
    #####:  252:  exit (status);
        -:  253:}
        -:  254:
        -:  255:/* Given a floating point value *X, and a suffix character, SUFFIX_CHAR,
        -:  256:   scale *X by the multiplier implied by SUFFIX_CHAR.  SUFFIX_CHAR may
        -:  257:   be the NUL byte or 's' to denote seconds, 'm' for minutes, 'h' for
        -:  258:   hours, or 'd' for days.  If SUFFIX_CHAR is invalid, don't modify *X
        -:  259:   and return false.  Otherwise return true.  */
        -:  260:
        -:  261:static bool
        1:  262:apply_time_suffix (double *x, char suffix_char)
        -:  263:{
        -:  264:  int multiplier;
        -:  265:
        1:  266:  switch (suffix_char)
        -:  267:    {
        -:  268:    case 0:
        -:  269:    case 's':
        1:  270:      multiplier = 1;
        1:  271:      break;
        -:  272:    case 'm':
    #####:  273:      multiplier = 60;
    #####:  274:      break;
        -:  275:    case 'h':
    #####:  276:      multiplier = 60 * 60;
    #####:  277:      break;
        -:  278:    case 'd':
    #####:  279:      multiplier = 60 * 60 * 24;
    #####:  280:      break;
        -:  281:    default:
    #####:  282:      return false;
        -:  283:    }
        -:  284:
        1:  285:  *x *= multiplier;
        -:  286:
        1:  287:  return true;
        -:  288:}
        -:  289:
        -:  290:static double
        1:  291:parse_duration (const char* str)
        -:  292:{
        -:  293:  double duration;
        -:  294:  const char *ep;
        -:  295:
        1:  296:  if (!xstrtod (str, &ep, &duration, c_strtod)
        -:  297:      /* Nonnegative interval.  */
        1:  298:      || ! (0 <= duration)
        -:  299:      /* No extra chars after the number and an optional s,m,h,d char.  */
        1:  300:      || (*ep && *(ep + 1))
        -:  301:      /* Check any suffix char and update timeout based on the suffix.  */
        1:  302:      || !apply_time_suffix (&duration, *ep))
        -:  303:    {
    #####:  304:      error (0, 0, _("invalid time interval %s"), quote (str));
    #####:  305:      usage (EXIT_CANCELED);
        -:  306:    }
        -:  307:
        1:  308:  return duration;
        -:  309:}
        -:  310:
        -:  311:static void
        1:  312:install_signal_handlers (int sigterm)
        -:  313:{
        -:  314:  struct sigaction sa;
        1:  315:  sigemptyset (&sa.sa_mask);  /* Allow concurrent calls to handler */
        1:  316:  sa.sa_handler = cleanup;
        1:  317:  sa.sa_flags = SA_RESTART;   /* Restart syscalls if possible, as that's
        -:  318:                                 more likely to work cleanly.  */
        -:  319:
        1:  320:  sigaction (SIGALRM, &sa, NULL); /* our timeout.  */
        1:  321:  sigaction (SIGINT, &sa, NULL);  /* Ctrl-C at terminal for example.  */
        1:  322:  sigaction (SIGQUIT, &sa, NULL); /* Ctrl-\ at terminal for example.  */
        1:  323:  sigaction (SIGHUP, &sa, NULL);  /* terminal closed for example.  */
        1:  324:  sigaction (SIGTERM, &sa, NULL); /* if we're killed, stop monitored proc.  */
        1:  325:  sigaction (sigterm, &sa, NULL); /* user specified termination signal.  */
        1:  326:}
        -:  327:
        -:  328:/* Try to disable core dumps for this process.
        -:  329:   Return TRUE if successful, FALSE otherwise.  */
        -:  330:static bool
    #####:  331:disable_core_dumps (void)
        -:  332:{
        -:  333:#if HAVE_PRCTL && defined PR_SET_DUMPABLE
    #####:  334:  if (prctl (PR_SET_DUMPABLE, 0) == 0)
    #####:  335:    return true;
        -:  336:
        -:  337:#elif HAVE_SETRLIMIT && defined RLIMIT_CORE
        -:  338:  /* Note this doesn't disable processing by a filter in
        -:  339:     /proc/sys/kernel/core_pattern on Linux.  */
        -:  340:  if (setrlimit (RLIMIT_CORE, &(struct rlimit) {0,0}) == 0)
        -:  341:    return true;
        -:  342:
        -:  343:#else
        -:  344:  return false;
        -:  345:#endif
        -:  346:
    #####:  347:  error (0, errno, _("warning: disabling core dumps failed"));
    #####:  348:  return false;
        -:  349:}
        -:  350:
        -:  351:int
        1:  352:main (int argc, char **argv)
        -:  353:{
        -:  354:  double timeout;
        -:  355:  char signame[SIG2STR_MAX];
        -:  356:  int c;
        -:  357:
        -:  358:  initialize_main (&argc, &argv);
        1:  359:  set_program_name (argv[0]);
        1:  360:  setlocale (LC_ALL, "");
        -:  361:  bindtextdomain (PACKAGE, LOCALEDIR);
        -:  362:  textdomain (PACKAGE);
        -:  363:
        1:  364:  initialize_exit_failure (EXIT_CANCELED);
        1:  365:  atexit (close_stdout);
        -:  366:
        1:  367:  while ((c = getopt_long (argc, argv, "+k:s:", long_options, NULL)) != -1)
        -:  368:    {
    #####:  369:      switch (c)
        -:  370:        {
        -:  371:        case 'k':
    #####:  372:          kill_after = parse_duration (optarg);
    #####:  373:          break;
        -:  374:
        -:  375:        case 's':
    #####:  376:          term_signal = operand2sig (optarg, signame);
    #####:  377:          if (term_signal == -1)
    #####:  378:            usage (EXIT_CANCELED);
    #####:  379:          break;
        -:  380:
        -:  381:        case FOREGROUND_OPTION:
    #####:  382:          foreground = true;
    #####:  383:          break;
        -:  384:
        -:  385:        case PRESERVE_STATUS_OPTION:
    #####:  386:          preserve_status = true;
    #####:  387:          break;
        -:  388:
    #####:  389:        case_GETOPT_HELP_CHAR;
        -:  390:
    #####:  391:        case_GETOPT_VERSION_CHAR (PROGRAM_NAME, AUTHORS);
        -:  392:
        -:  393:        default:
    #####:  394:          usage (EXIT_CANCELED);
        -:  395:          break;
        -:  396:        }
        -:  397:    }
        -:  398:
        1:  399:  if (argc - optind < 2)
    #####:  400:    usage (EXIT_CANCELED);
        -:  401:
        1:  402:  timeout = parse_duration (argv[optind++]);
        -:  403:
        1:  404:  argv += optind;
        -:  405:
        -:  406:  /* Ensure we're in our own group so all subprocesses can be killed.
        -:  407:     Note we don't just put the child in a separate group as
        -:  408:     then we would need to worry about foreground and background groups
        -:  409:     and propagating signals between them.  */
        1:  410:  if (!foreground)
        1:  411:    setpgid (0, 0);
        -:  412:
        -:  413:  /* Setup handlers before fork() so that we
        -:  414:     handle any signals caused by child, without races.  */
        1:  415:  install_signal_handlers (term_signal);
        1:  416:  signal (SIGTTIN, SIG_IGN);   /* Don't stop if background child needs tty.  */
        1:  417:  signal (SIGTTOU, SIG_IGN);   /* Don't stop if background child needs tty.  */
        1:  418:  signal (SIGCHLD, SIG_DFL);   /* Don't inherit CHLD handling from parent.   */
        -:  419:
        1:  420:  monitored_pid = fork ();
        1:  421:  if (monitored_pid == -1)
        -:  422:    {
    #####:  423:      error (0, errno, _("fork system call failed"));
    #####:  424:      return EXIT_CANCELED;
        -:  425:    }
        1:  426:  else if (monitored_pid == 0)
        -:  427:    {                           /* child */
        -:  428:      int exit_status;
        -:  429:
        -:  430:      /* exec doesn't reset SIG_IGN -> SIG_DFL.  */
    #####:  431:      signal (SIGTTIN, SIG_DFL);
    #####:  432:      signal (SIGTTOU, SIG_DFL);
        -:  433:
    #####:  434:      execvp (argv[0], argv);   /* FIXME: should we use "sh -c" ... here?  */
        -:  435:
        -:  436:      /* exit like sh, env, nohup, ...  */
    #####:  437:      exit_status = (errno == ENOENT ? EXIT_ENOENT : EXIT_CANNOT_INVOKE);
    #####:  438:      error (0, errno, _("failed to run command %s"), quote (argv[0]));
    #####:  439:      return exit_status;
        -:  440:    }
        -:  441:  else
        -:  442:    {
        -:  443:      pid_t wait_result;
        -:  444:      int status;
        -:  445:
        1:  446:      settimeout (timeout);
        -:  447:
        2:  448:      while ((wait_result = waitpid (monitored_pid, &status, 0)) < 0
    #####:  449:             && errno == EINTR)
    #####:  450:        continue;
        -:  451:
        1:  452:      if (wait_result < 0)
        -:  453:        {
        -:  454:          /* shouldn't happen.  */
    #####:  455:          error (0, errno, _("error waiting for command"));
    #####:  456:          status = EXIT_CANCELED;
        -:  457:        }
        -:  458:      else
        -:  459:        {
        1:  460:          if (WIFEXITED (status))
        1:  461:            status = WEXITSTATUS (status);
    #####:  462:          else if (WIFSIGNALED (status))
        -:  463:            {
    #####:  464:              int sig = WTERMSIG (status);
    #####:  465:              if (WCOREDUMP (status))
    #####:  466:                error (0, 0, _("the monitored command dumped core"));
    #####:  467:              if (!timed_out && disable_core_dumps ())
        -:  468:                {
        -:  469:                  /* exit with the signal flag set.  */
    #####:  470:                  signal (sig, SIG_DFL);
    #####:  471:                  raise (sig);
        -:  472:                }
    #####:  473:              status = sig + 128; /* what sh returns for signaled processes.  */
        -:  474:            }
        -:  475:          else
        -:  476:            {
        -:  477:              /* shouldn't happen.  */
    #####:  478:              error (0, 0, _("unknown status from command (0x%X)"), status);
    #####:  479:              status = EXIT_FAILURE;
        -:  480:            }
        -:  481:        }
        -:  482:
        1:  483:      if (timed_out && !preserve_status)
    #####:  484:        return EXIT_TIMEDOUT;
        -:  485:      else
        1:  486:        return status;
        -:  487:    }
        -:  488:}
