        -:    0:Source:rm.c
        -:    0:Graph:rm.gcno
        -:    0:Data:rm.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:/* 'rm' file deletion utility for GNU.
        -:    2:   Copyright (C) 1988-2012 Free Software Foundation, Inc.
        -:    3:
        -:    4:   This program is free software: you can redistribute it and/or modify
        -:    5:   it under the terms of the GNU General Public License as published by
        -:    6:   the Free Software Foundation, either version 3 of the License, or
        -:    7:   (at your option) any later version.
        -:    8:
        -:    9:   This program is distributed in the hope that it will be useful,
        -:   10:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   11:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   12:   GNU General Public License for more details.
        -:   13:
        -:   14:   You should have received a copy of the GNU General Public License
        -:   15:   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
        -:   16:
        -:   17:/* Initially written by Paul Rubin, David MacKenzie, and Richard Stallman.
        -:   18:   Reworked to use chdir and avoid recursion, and later, rewritten
        -:   19:   once again, to use fts, by Jim Meyering.  */
        -:   20:
        -:   21:#include <config.h>
        -:   22:#include <stdio.h>
        -:   23:#include <getopt.h>
        -:   24:#include <sys/types.h>
        -:   25:#include <assert.h>
        -:   26:
        -:   27:#include "system.h"
        -:   28:#include "argmatch.h"
        -:   29:#include "error.h"
        -:   30:#include "quote.h"
        -:   31:#include "quotearg.h"
        -:   32:#include "remove.h"
        -:   33:#include "root-dev-ino.h"
        -:   34:#include "yesno.h"
        -:   35:#include "priv-set.h"
        -:   36:
        -:   37:/* The official name of this program (e.g., no 'g' prefix).  */
        -:   38:#define PROGRAM_NAME "rm"
        -:   39:
        -:   40:#define AUTHORS \
        -:   41:  proper_name ("Paul Rubin"), \
        -:   42:  proper_name ("David MacKenzie"), \
        -:   43:  proper_name ("Richard M. Stallman"), \
        -:   44:  proper_name ("Jim Meyering")
        -:   45:
        -:   46:/* For long options that have no equivalent short option, use a
        -:   47:   non-character as a pseudo short option, starting with CHAR_MAX + 1.  */
        -:   48:enum
        -:   49:{
        -:   50:  INTERACTIVE_OPTION = CHAR_MAX + 1,
        -:   51:  ONE_FILE_SYSTEM,
        -:   52:  NO_PRESERVE_ROOT,
        -:   53:  PRESERVE_ROOT,
        -:   54:  PRESUME_INPUT_TTY_OPTION
        -:   55:};
        -:   56:
        -:   57:enum interactive_type
        -:   58:  {
        -:   59:    interactive_never,		/* 0: no option or --interactive=never */
        -:   60:    interactive_once,		/* 1: -I or --interactive=once */
        -:   61:    interactive_always		/* 2: default, -i or --interactive=always */
        -:   62:  };
        -:   63:
        -:   64:static struct option const long_opts[] =
        -:   65:{
        -:   66:  {"force", no_argument, NULL, 'f'},
        -:   67:  {"interactive", optional_argument, NULL, INTERACTIVE_OPTION},
        -:   68:
        -:   69:  {"one-file-system", no_argument, NULL, ONE_FILE_SYSTEM},
        -:   70:  {"no-preserve-root", no_argument, NULL, NO_PRESERVE_ROOT},
        -:   71:  {"preserve-root", no_argument, NULL, PRESERVE_ROOT},
        -:   72:
        -:   73:  /* This is solely for testing.  Do not document.  */
        -:   74:  /* It is relatively difficult to ensure that there is a tty on stdin.
        -:   75:     Since rm acts differently depending on that, without this option,
        -:   76:     it'd be harder to test the parts of rm that depend on that setting.  */
        -:   77:  {"-presume-input-tty", no_argument, NULL, PRESUME_INPUT_TTY_OPTION},
        -:   78:
        -:   79:  {"recursive", no_argument, NULL, 'r'},
        -:   80:  {"verbose", no_argument, NULL, 'v'},
        -:   81:  {GETOPT_HELP_OPTION_DECL},
        -:   82:  {GETOPT_VERSION_OPTION_DECL},
        -:   83:  {NULL, 0, NULL, 0}
        -:   84:};
        -:   85:
        -:   86:static char const *const interactive_args[] =
        -:   87:{
        -:   88:  "never", "no", "none",
        -:   89:  "once",
        -:   90:  "always", "yes", NULL
        -:   91:};
        -:   92:static enum interactive_type const interactive_types[] =
        -:   93:{
        -:   94:  interactive_never, interactive_never, interactive_never,
        -:   95:  interactive_once,
        -:   96:  interactive_always, interactive_always
        -:   97:};
        -:   98:ARGMATCH_VERIFY (interactive_args, interactive_types);
        -:   99:
        -:  100:/* Advise the user about invalid usages like "rm -foo" if the file
        -:  101:   "-foo" exists, assuming ARGC and ARGV are as with 'main'.  */
        -:  102:
        -:  103:static void
    #####:  104:diagnose_leading_hyphen (int argc, char **argv)
        -:  105:{
        -:  106:  /* OPTIND is unreliable, so iterate through the arguments looking
        -:  107:     for a file name that looks like an option.  */
        -:  108:  int i;
        -:  109:
    #####:  110:  for (i = 1; i < argc; i++)
        -:  111:    {
    #####:  112:      char const *arg = argv[i];
        -:  113:      struct stat st;
        -:  114:
    #####:  115:      if (arg[0] == '-' && arg[1] && lstat (arg, &st) == 0)
        -:  116:        {
    #####:  117:          fprintf (stderr,
        -:  118:                   _("Try '%s ./%s' to remove the file %s.\n"),
        -:  119:                   argv[0],
        -:  120:                   quotearg_n_style (1, shell_quoting_style, arg),
        -:  121:                   quote (arg));
    #####:  122:          break;
        -:  123:        }
        -:  124:    }
    #####:  125:}
        -:  126:
        -:  127:void
    #####:  128:usage (int status)
        -:  129:{
    #####:  130:  if (status != EXIT_SUCCESS)
    #####:  131:    emit_try_help ();
        -:  132:  else
        -:  133:    {
    #####:  134:      printf (_("Usage: %s [OPTION]... FILE...\n"), program_name);
    #####:  135:      fputs (_("\
        -:  136:Remove (unlink) the FILE(s).\n\
        -:  137:\n\
        -:  138:  -f, --force           ignore nonexistent files and arguments, never prompt\n\
        -:  139:  -i                    prompt before every removal\n\
        -:  140:"), stdout);
    #####:  141:      fputs (_("\
        -:  142:  -I                    prompt once before removing more than three files, or\n\
        -:  143:                          when removing recursively.  Less intrusive than -i,\n\
        -:  144:                          while still giving protection against most mistakes\n\
        -:  145:      --interactive[=WHEN]  prompt according to WHEN: never, once (-I), or\n\
        -:  146:                          always (-i).  Without WHEN, prompt always\n\
        -:  147:"), stdout);
    #####:  148:      fputs (_("\
        -:  149:      --one-file-system  when removing a hierarchy recursively, skip any\n\
        -:  150:                          directory that is on a file system different from\n\
        -:  151:                          that of the corresponding command line argument\n\
        -:  152:"), stdout);
    #####:  153:      fputs (_("\
        -:  154:      --no-preserve-root  do not treat '/' specially\n\
        -:  155:      --preserve-root   do not remove '/' (default)\n\
        -:  156:  -r, -R, --recursive   remove directories and their contents recursively\n\
        -:  157:  -v, --verbose         explain what is being done\n\
        -:  158:"), stdout);
    #####:  159:      fputs (HELP_OPTION_DESCRIPTION, stdout);
    #####:  160:      fputs (VERSION_OPTION_DESCRIPTION, stdout);
    #####:  161:      fputs (_("\
        -:  162:\n\
        -:  163:By default, rm does not remove directories.  Use the --recursive (-r or -R)\n\
        -:  164:option to remove each listed directory, too, along with all of its contents.\n\
        -:  165:"), stdout);
    #####:  166:      printf (_("\
        -:  167:\n\
        -:  168:To remove a file whose name starts with a '-', for example '-foo',\n\
        -:  169:use one of these commands:\n\
        -:  170:  %s -- -foo\n\
        -:  171:\n\
        -:  172:  %s ./-foo\n\
        -:  173:"),
        -:  174:              program_name, program_name);
    #####:  175:      fputs (_("\
        -:  176:\n\
        -:  177:Note that if you use rm to remove a file, it might be possible to recover\n\
        -:  178:some of its contents, given sufficient expertise and/or time.  For greater\n\
        -:  179:assurance that the contents are truly unrecoverable, consider using shred.\n\
        -:  180:"), stdout);
    #####:  181:      emit_ancillary_info ();
        -:  182:    }
    #####:  183:  exit (status);
        -:  184:}
        -:  185:
        -:  186:static void
        2:  187:rm_option_init (struct rm_options *x)
        -:  188:{
        2:  189:  x->ignore_missing_files = false;
        2:  190:  x->interactive = RMI_SOMETIMES;
        2:  191:  x->one_file_system = false;
        2:  192:  x->recursive = false;
        2:  193:  x->root_dev_ino = NULL;
        2:  194:  x->stdin_tty = isatty (STDIN_FILENO);
        2:  195:  x->verbose = false;
        -:  196:
        -:  197:  /* Since this program exits immediately after calling 'rm', rm need not
        -:  198:     expend unnecessary effort to preserve the initial working directory.  */
        2:  199:  x->require_restore_cwd = false;
        2:  200:}
        -:  201:
        -:  202:int
        2:  203:main (int argc, char **argv)
        -:  204:{
        2:  205:  bool preserve_root = true;
        -:  206:  struct rm_options x;
        2:  207:  bool prompt_once = false;
        -:  208:  int c;
        -:  209:
        -:  210:  initialize_main (&argc, &argv);
        2:  211:  set_program_name (argv[0]);
        2:  212:  setlocale (LC_ALL, "");
        -:  213:  bindtextdomain (PACKAGE, LOCALEDIR);
        -:  214:  textdomain (PACKAGE);
        -:  215:
        2:  216:  atexit (close_stdin);
        -:  217:
        2:  218:  rm_option_init (&x);
        -:  219:
        -:  220:  /* Try to disable the ability to unlink a directory.  */
        2:  221:  priv_set_remove_linkdir ();
        -:  222:
        2:  223:  while ((c = getopt_long (argc, argv, "firvIR", long_opts, NULL)) != -1)
        -:  224:    {
        2:  225:      switch (c)
        -:  226:        {
        -:  227:        case 'f':
        2:  228:          x.interactive = RMI_NEVER;
        2:  229:          x.ignore_missing_files = true;
        2:  230:          prompt_once = false;
        2:  231:          break;
        -:  232:
        -:  233:        case 'i':
    #####:  234:          x.interactive = RMI_ALWAYS;
    #####:  235:          x.ignore_missing_files = false;
    #####:  236:          prompt_once = false;
    #####:  237:          break;
        -:  238:
        -:  239:        case 'I':
    #####:  240:          x.interactive = RMI_NEVER;
    #####:  241:          x.ignore_missing_files = false;
    #####:  242:          prompt_once = true;
    #####:  243:          break;
        -:  244:
        -:  245:        case 'r':
        -:  246:        case 'R':
    #####:  247:          x.recursive = true;
    #####:  248:          break;
        -:  249:
        -:  250:        case INTERACTIVE_OPTION:
        -:  251:          {
        -:  252:            int i;
    #####:  253:            if (optarg)
    #####:  254:              i = XARGMATCH ("--interactive", optarg, interactive_args,
        -:  255:                             interactive_types);
        -:  256:            else
    #####:  257:              i = interactive_always;
    #####:  258:            switch (i)
        -:  259:              {
        -:  260:              case interactive_never:
    #####:  261:                x.interactive = RMI_NEVER;
    #####:  262:                prompt_once = false;
    #####:  263:                break;
        -:  264:
        -:  265:              case interactive_once:
    #####:  266:                x.interactive = RMI_SOMETIMES;
    #####:  267:                x.ignore_missing_files = false;
    #####:  268:                prompt_once = true;
    #####:  269:                break;
        -:  270:
        -:  271:              case interactive_always:
    #####:  272:                x.interactive = RMI_ALWAYS;
    #####:  273:                x.ignore_missing_files = false;
    #####:  274:                prompt_once = false;
    #####:  275:                break;
        -:  276:              }
    #####:  277:            break;
        -:  278:          }
        -:  279:
        -:  280:        case ONE_FILE_SYSTEM:
    #####:  281:          x.one_file_system = true;
    #####:  282:          break;
        -:  283:
        -:  284:        case NO_PRESERVE_ROOT:
    #####:  285:          preserve_root = false;
    #####:  286:          break;
        -:  287:
        -:  288:        case PRESERVE_ROOT:
    #####:  289:          preserve_root = true;
    #####:  290:          break;
        -:  291:
        -:  292:        case PRESUME_INPUT_TTY_OPTION:
    #####:  293:          x.stdin_tty = true;
    #####:  294:          break;
        -:  295:
        -:  296:        case 'v':
    #####:  297:          x.verbose = true;
    #####:  298:          break;
        -:  299:
    #####:  300:        case_GETOPT_HELP_CHAR;
    #####:  301:        case_GETOPT_VERSION_CHAR (PROGRAM_NAME, AUTHORS);
        -:  302:        default:
    #####:  303:          diagnose_leading_hyphen (argc, argv);
    #####:  304:          usage (EXIT_FAILURE);
        -:  305:        }
        -:  306:    }
        -:  307:
        2:  308:  if (argc <= optind)
        -:  309:    {
    #####:  310:      if (x.ignore_missing_files)
    #####:  311:        exit (EXIT_SUCCESS);
        -:  312:      else
        -:  313:        {
    #####:  314:          error (0, 0, _("missing operand"));
    #####:  315:          usage (EXIT_FAILURE);
        -:  316:        }
        -:  317:    }
        -:  318:
        2:  319:  if (x.recursive && preserve_root)
        -:  320:    {
        -:  321:      static struct dev_ino dev_ino_buf;
    #####:  322:      x.root_dev_ino = get_root_dev_ino (&dev_ino_buf);
    #####:  323:      if (x.root_dev_ino == NULL)
    #####:  324:        error (EXIT_FAILURE, errno, _("failed to get attributes of %s"),
        -:  325:               quote ("/"));
        -:  326:    }
        -:  327:
        2:  328:  size_t n_files = argc - optind;
        2:  329:  char **file =  argv + optind;
        -:  330:
        2:  331:  if (prompt_once && (x.recursive || 3 < n_files))
        -:  332:    {
    #####:  333:      fprintf (stderr,
    #####:  334:               (x.recursive
        -:  335:                ? _("%s: remove all arguments recursively? ")
        -:  336:                : _("%s: remove all arguments? ")),
        -:  337:               program_name);
    #####:  338:      if (!yesno ())
    #####:  339:        exit (EXIT_SUCCESS);
        -:  340:    }
        -:  341:
        2:  342:  enum RM_status status = rm (file, &x);
        2:  343:  assert (VALID_STATUS (status));
        2:  344:  exit (status == RM_ERROR ? EXIT_FAILURE : EXIT_SUCCESS);
        -:  345:}
