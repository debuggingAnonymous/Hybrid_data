        -:    0:Source:id.c
        -:    0:Graph:id.gcno
        -:    0:Data:id.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* id -- print real and effective UIDs and GIDs
        -:    2:   Copyright (C) 1989-2007 Free Software Foundation, Inc.
        -:    3:
        -:    4:   This program is free software; you can redistribute it and/or modify
        -:    5:   it under the terms of the GNU General Public License as published by
        -:    6:   the Free Software Foundation; either version 2, or (at your option)
        -:    7:   any later version.
        -:    8:
        -:    9:   This program is distributed in the hope that it will be useful,
        -:   10:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   11:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   12:   GNU General Public License for more details.
        -:   13:
        -:   14:   You should have received a copy of the GNU General Public License
        -:   15:   along with this program; if not, write to the Free Software Foundation,
        -:   16:   Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
        -:   17:
        -:   18:/* Written by Arnold Robbins.
        -:   19:   Major rewrite by David MacKenzie, djm@gnu.ai.mit.edu. */
        -:   20:
        -:   21:#include <config.h>
        -:   22:#include <stdio.h>
        -:   23:#include <getopt.h>
        -:   24:#include <sys/types.h>
        -:   25:#include <pwd.h>
        -:   26:#include <grp.h>
        -:   27:#include <getopt.h>
        -:   28:#include <selinux/selinux.h>
        -:   29:
        -:   30:#include "system.h"
        -:   31:#include "error.h"
        -:   32:#include "getugroups.h"
        -:   33:#include "mgetgroups.h"
        -:   34:#include "quote.h"
        -:   35:
        -:   36:/* The official name of this program (e.g., no `g' prefix).  */
        -:   37:#define PROGRAM_NAME "id"
        -:   38:
        -:   39:#define AUTHORS "Arnold Robbins", "David MacKenzie"
        -:   40:
        -:   41:/* If nonzero, output only the SELinux context. -Z */
        -:   42:static int just_context = 0;
        -:   43:
        -:   44:static void print_user (uid_t uid);
        -:   45:static void print_group (gid_t gid);
        -:   46:static void print_group_list (const char *username);
        -:   47:static void print_full_info (const char *username);
        -:   48:
        -:   49:/* The name this program was run with. */
        -:   50:char *program_name;
        -:   51:
        -:   52:/* If true, output user/group name instead of ID number. -n */
        -:   53:static bool use_name = false;
        -:   54:
        -:   55:/* The real and effective IDs of the user to print. */
        -:   56:static uid_t ruid, euid;
        -:   57:static gid_t rgid, egid;
        -:   58:
        -:   59:/* True unless errors have been encountered.  */
        -:   60:static bool ok = true;
        -:   61:
        -:   62:/* The SELinux context.  Start with a known invalid value so print_full_info
        -:   63:   knows when `context' has not been set to a meaningful value.  */
        -:   64:static security_context_t context = NULL;
        -:   65:
        -:   66:static struct option const longopts[] =
        -:   67:{
        -:   68:  {"context", no_argument, NULL, 'Z'},
        -:   69:  {"group", no_argument, NULL, 'g'},
        -:   70:  {"groups", no_argument, NULL, 'G'},
        -:   71:  {"name", no_argument, NULL, 'n'},
        -:   72:  {"real", no_argument, NULL, 'r'},
        -:   73:  {"user", no_argument, NULL, 'u'},
        -:   74:  {GETOPT_HELP_OPTION_DECL},
        -:   75:  {GETOPT_VERSION_OPTION_DECL},
        -:   76:  {NULL, 0, NULL, 0}
        -:   77:};
        -:   78:
        -:   79:void
    #####:   80:usage (int status)
        -:   81:{
    #####:   82:  if (status != EXIT_SUCCESS)
    #####:   83:    fprintf (stderr, _("Try `%s --help' for more information.\n"),
        -:   84:	     program_name);
        -:   85:  else
        -:   86:    {
    #####:   87:      printf (_("Usage: %s [OPTION]... [USERNAME]\n"), program_name);
    #####:   88:      fputs (_("\
        -:   89:Print information for USERNAME, or the current user.\n\
        -:   90:\n\
        -:   91:  -a              ignore, for compatibility with other versions\n\
        -:   92:  -Z, --context   print only the security context of the current user\n\
        -:   93:  -g, --group     print only the effective group ID\n\
        -:   94:  -G, --groups    print all group IDs\n\
        -:   95:  -n, --name      print a name instead of a number, for -ugG\n\
        -:   96:  -r, --real      print the real ID instead of the effective ID, with -ugG\n\
        -:   97:  -u, --user      print only the effective user ID\n\
        -:   98:"), stdout);
    #####:   99:      fputs (HELP_OPTION_DESCRIPTION, stdout);
    #####:  100:      fputs (VERSION_OPTION_DESCRIPTION, stdout);
    #####:  101:      fputs (_("\
        -:  102:\n\
        -:  103:Without any OPTION, print some useful set of identified information.\n\
        -:  104:"), stdout);
    #####:  105:      emit_bug_reporting_address ();
        -:  106:    }
    #####:  107:  exit (status);
        -:  108:}
        -:  109:
        -:  110:int
        1:  111:main (int argc, char **argv)
        -:  112:{
        -:  113:  int optc;
        1:  114:  int selinux_enabled = (is_selinux_enabled () > 0);
        -:  115:
        -:  116:  /* If true, output the list of all group IDs. -G */
        1:  117:  bool just_group_list = false;
        -:  118:  /* If true, output only the group ID(s). -g */
        1:  119:  bool just_group = false;
        -:  120:  /* If true, output real UID/GID instead of default effective UID/GID. -r */
        1:  121:  bool use_real = false;
        -:  122:  /* If true, output only the user ID(s). -u */
        1:  123:  bool just_user = false;
        -:  124:
        -:  125:  initialize_main (&argc, &argv);
        1:  126:  program_name = argv[0];
        1:  127:  setlocale (LC_ALL, "");
        -:  128:  bindtextdomain (PACKAGE, LOCALEDIR);
        -:  129:  textdomain (PACKAGE);
        -:  130:
        1:  131:  atexit (close_stdout);
        -:  132:
        3:  133:  while ((optc = getopt_long (argc, argv, "agnruGZ", longopts, NULL)) != -1)
        -:  134:    {
        1:  135:      switch (optc)
        -:  136:	{
        -:  137:	case 'a':
        -:  138:	  /* Ignore -a, for compatibility with SVR4.  */
    #####:  139:	  break;
        -:  140:
        -:  141:        case 'Z':
        -:  142:	  /* politely decline if we're not on a selinux-enabled kernel. */
    #####:  143:	  if (!selinux_enabled)
    #####:  144:	    error (EXIT_FAILURE, 0,
        -:  145:		   _("--context (-Z) works only on an SELinux-enabled kernel"));
    #####:  146:          just_context = 1;
    #####:  147:          break;
        -:  148:
        -:  149:	case 'g':
    #####:  150:	  just_group = true;
    #####:  151:	  break;
        -:  152:	case 'n':
    #####:  153:	  use_name = true;
    #####:  154:	  break;
        -:  155:	case 'r':
    #####:  156:	  use_real = true;
    #####:  157:	  break;
        -:  158:	case 'u':
    #####:  159:	  just_user = true;
    #####:  160:	  break;
        -:  161:	case 'G':
        1:  162:	  just_group_list = true;
        1:  163:	  break;
    #####:  164:	case_GETOPT_HELP_CHAR;
    #####:  165:	case_GETOPT_VERSION_CHAR (PROGRAM_NAME, AUTHORS);
        -:  166:	default:
    #####:  167:	  usage (EXIT_FAILURE);
        -:  168:	}
        -:  169:    }
        -:  170:
        1:  171:  if (1 < argc - optind)
        -:  172:    {
    #####:  173:      error (0, 0, _("extra operand %s"), quote (argv[optind + 1]));
    #####:  174:      usage (EXIT_FAILURE);
        -:  175:    }
        -:  176:
        1:  177:  if (argc - optind == 1 && just_context)
    #####:  178:    error (EXIT_FAILURE, 0,
        -:  179:	   _("cannot print security context when user specified"));
        -:  180:
        1:  181:  if (just_context && !selinux_enabled)
    #####:  182:    error (EXIT_FAILURE, 0, _("\
        -:  183:cannot display context when selinux not enabled or when displaying the id\n\
        -:  184:of a different user"));
        -:  185:
        -:  186:  /* If we are on a selinux-enabled kernel, get our context.
        -:  187:     Otherwise, leave the context variable alone - it has
        -:  188:     been initialized known invalid value; if we see this invalid
        -:  189:     value later, we will know we are on a non-selinux kernel.  */
        1:  190:  if (selinux_enabled)
        -:  191:    {
    #####:  192:      if (getcon (&context) && just_context)
    #####:  193:        error (EXIT_FAILURE, 0, _("can't get process context"));
        -:  194:    }
        -:  195:
        1:  196:  if (just_user + just_group + just_group_list + just_context > 1)
    #####:  197:    error (EXIT_FAILURE, 0, _("cannot print \"only\" of more than one choice"));
        -:  198:
        1:  199:  if (just_user + just_group + just_group_list == 0 && (use_real | use_name))
    #####:  200:    error (EXIT_FAILURE, 0,
        -:  201:	   _("cannot print only names or real IDs in default format"));
        -:  202:
        1:  203:  if (argc - optind == 1)
        -:  204:    {
    #####:  205:      struct passwd *pwd = getpwnam (argv[optind]);
    #####:  206:      if (pwd == NULL)
    #####:  207:	error (EXIT_FAILURE, 0, _("%s: No such user"), argv[optind]);
    #####:  208:      ruid = euid = pwd->pw_uid;
    #####:  209:      rgid = egid = pwd->pw_gid;
        -:  210:    }
        -:  211:  else
        -:  212:    {
        1:  213:      euid = geteuid ();
        1:  214:      ruid = getuid ();
        1:  215:      egid = getegid ();
        1:  216:      rgid = getgid ();
        -:  217:    }
        -:  218:
        1:  219:  if (just_user)
    #####:  220:    print_user (use_real ? ruid : euid);
        1:  221:  else if (just_group)
    #####:  222:    print_group (use_real ? rgid : egid);
        1:  223:  else if (just_group_list)
        1:  224:    print_group_list (argv[optind]);
    #####:  225:  else if (just_context)
    #####:  226:    fputs (context, stdout);
        -:  227:  else
    #####:  228:    print_full_info (argv[optind]);
        1:  229:  putchar ('\n');
        -:  230:
        1:  231:  exit (ok ? EXIT_SUCCESS : EXIT_FAILURE);
        -:  232:}
        -:  233:
        -:  234:/* Print the name or value of user ID UID. */
        -:  235:
        -:  236:static void
    #####:  237:print_user (uid_t uid)
        -:  238:{
    #####:  239:  struct passwd *pwd = NULL;
        -:  240:
    #####:  241:  if (use_name)
        -:  242:    {
    #####:  243:      pwd = getpwuid (uid);
    #####:  244:      if (pwd == NULL)
        -:  245:	{
    #####:  246:	  error (0, 0, _("cannot find name for user ID %lu"),
        -:  247:		 (unsigned long int) uid);
    #####:  248:	  ok = false;
        -:  249:	}
        -:  250:    }
        -:  251:
    #####:  252:  if (pwd == NULL)
    #####:  253:    printf ("%lu", (unsigned long int) uid);
        -:  254:  else
    #####:  255:    printf ("%s", pwd->pw_name);
    #####:  256:}
        -:  257:
        -:  258:/* Print the name or value of group ID GID. */
        -:  259:
        -:  260:static void
        1:  261:print_group (gid_t gid)
        -:  262:{
        1:  263:  struct group *grp = NULL;
        -:  264:
        1:  265:  if (use_name)
        -:  266:    {
    #####:  267:      grp = getgrgid (gid);
    #####:  268:      if (grp == NULL)
        -:  269:	{
    #####:  270:	  error (0, 0, _("cannot find name for group ID %lu"),
        -:  271:		 (unsigned long int) gid);
    #####:  272:	  ok = false;
        -:  273:	}
        -:  274:    }
        -:  275:
        1:  276:  if (grp == NULL)
        1:  277:    printf ("%lu", (unsigned long int) gid);
        -:  278:  else
    #####:  279:    printf ("%s", grp->gr_name);
        1:  280:}
        -:  281:
        -:  282:/* Print all of the distinct groups the user is in. */
        -:  283:
        -:  284:static void
        1:  285:print_group_list (const char *username)
        -:  286:{
        -:  287:  struct passwd *pwd;
        -:  288:
        1:  289:  pwd = getpwuid (ruid);
        1:  290:  if (pwd == NULL)
    #####:  291:    ok = false;
        -:  292:
        1:  293:  print_group (rgid);
        1:  294:  if (egid != rgid)
        -:  295:    {
    #####:  296:      putchar (' ');
    #####:  297:      print_group (egid);
        -:  298:    }
        -:  299:
        -:  300:#if HAVE_GETGROUPS
        -:  301:  {
        -:  302:    GETGROUPS_T *groups;
        -:  303:    size_t i;
        -:  304:
        1:  305:    int n_groups = mgetgroups (username, (pwd ? pwd->pw_gid : (gid_t) -1),
        -:  306:			       &groups);
        1:  307:    if (n_groups < 0)
        -:  308:      {
    #####:  309:	error (0, errno, _("failed to get groups for user %s"),
        -:  310:	       quote (username));
    #####:  311:	ok = false;
        1:  312:	return;
        -:  313:      }
        -:  314:
        1:  315:    for (i = 0; i < n_groups; i++)
    #####:  316:      if (groups[i] != rgid && groups[i] != egid)
        -:  317:	{
    #####:  318:	  putchar (' ');
    #####:  319:	  print_group (groups[i]);
        -:  320:	}
        1:  321:    free (groups);
        -:  322:  }
        -:  323:#endif /* HAVE_GETGROUPS */
        -:  324:}
        -:  325:
        -:  326:/* Print all of the info about the user's user and group IDs. */
        -:  327:
        -:  328:static void
    #####:  329:print_full_info (const char *username)
        -:  330:{
        -:  331:  struct passwd *pwd;
        -:  332:  struct group *grp;
        -:  333:
    #####:  334:  printf ("uid=%lu", (unsigned long int) ruid);
    #####:  335:  pwd = getpwuid (ruid);
    #####:  336:  if (pwd)
    #####:  337:    printf ("(%s)", pwd->pw_name);
        -:  338:
    #####:  339:  printf (" gid=%lu", (unsigned long int) rgid);
    #####:  340:  grp = getgrgid (rgid);
    #####:  341:  if (grp)
    #####:  342:    printf ("(%s)", grp->gr_name);
        -:  343:
    #####:  344:  if (euid != ruid)
        -:  345:    {
    #####:  346:      printf (" euid=%lu", (unsigned long int) euid);
    #####:  347:      pwd = getpwuid (euid);
    #####:  348:      if (pwd)
    #####:  349:	printf ("(%s)", pwd->pw_name);
        -:  350:    }
        -:  351:
    #####:  352:  if (egid != rgid)
        -:  353:    {
    #####:  354:      printf (" egid=%lu", (unsigned long int) egid);
    #####:  355:      grp = getgrgid (egid);
    #####:  356:      if (grp)
    #####:  357:	printf ("(%s)", grp->gr_name);
        -:  358:    }
        -:  359:
        -:  360:#if HAVE_GETGROUPS
        -:  361:  {
        -:  362:    GETGROUPS_T *groups;
        -:  363:    size_t i;
        -:  364:
    #####:  365:    int n_groups = mgetgroups (username, (pwd ? pwd->pw_gid : (gid_t) -1),
        -:  366:			       &groups);
    #####:  367:    if (n_groups < 0)
        -:  368:      {
    #####:  369:	error (0, errno, _("failed to get groups for user %s"),
        -:  370:	       quote (username));
    #####:  371:	ok = false;
    #####:  372:	return;
        -:  373:      }
        -:  374:
    #####:  375:    if (n_groups > 0)
    #####:  376:      fputs (_(" groups="), stdout);
    #####:  377:    for (i = 0; i < n_groups; i++)
        -:  378:      {
    #####:  379:	if (i > 0)
    #####:  380:	  putchar (',');
    #####:  381:	printf ("%lu", (unsigned long int) groups[i]);
    #####:  382:	grp = getgrgid (groups[i]);
    #####:  383:	if (grp)
    #####:  384:	  printf ("(%s)", grp->gr_name);
        -:  385:      }
    #####:  386:    free (groups);
        -:  387:  }
        -:  388:#endif /* HAVE_GETGROUPS */
    #####:  389:  if (context != NULL)
    #####:  390:    printf (" context=%s", context);
        -:  391:}
