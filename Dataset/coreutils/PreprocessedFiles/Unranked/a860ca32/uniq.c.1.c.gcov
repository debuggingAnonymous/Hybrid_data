        -:    0:Source:uniq.c
        -:    0:Graph:uniq.gcno
        -:    0:Data:uniq.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:/* uniq -- remove duplicate lines from a sorted file
        -:    2:   Copyright (C) 86, 91, 1995-2007 Free Software Foundation, Inc.
        -:    3:
        -:    4:   This program is free software: you can redistribute it and/or modify
        -:    5:   it under the terms of the GNU General Public License as published by
        -:    6:   the Free Software Foundation, either version 3 of the License, or
        -:    7:   (at your option) any later version.
        -:    8:
        -:    9:   This program is distributed in the hope that it will be useful,
        -:   10:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   11:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   12:   GNU General Public License for more details.
        -:   13:
        -:   14:   You should have received a copy of the GNU General Public License
        -:   15:   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
        -:   16:
        -:   17:/* Written by Richard Stallman and David MacKenzie. */
        -:   18:
        -:   19:#include <config.h>
        -:   20:
        -:   21:#include <stdio.h>
        -:   22:#include <getopt.h>
        -:   23:#include <sys/types.h>
        -:   24:
        -:   25:#include "system.h"
        -:   26:#include "argmatch.h"
        -:   27:#include "linebuffer.h"
        -:   28:#include "error.h"
        -:   29:#include "hard-locale.h"
        -:   30:#include "posixver.h"
        -:   31:#include "quote.h"
        -:   32:#include "xmemcoll.h"
        -:   33:#include "xstrtol.h"
        -:   34:#include "memcasecmp.h"
        -:   35:
        -:   36:/* The official name of this program (e.g., no `g' prefix).  */
        -:   37:#define PROGRAM_NAME "uniq"
        -:   38:
        -:   39:#define AUTHORS "Richard Stallman", "David MacKenzie"
        -:   40:
        -:   41:#define SWAP_LINES(A, B)			\
        -:   42:  do						\
        -:   43:    {						\
        -:   44:      struct linebuffer *_tmp;			\
        -:   45:      _tmp = (A);				\
        -:   46:      (A) = (B);				\
        -:   47:      (B) = _tmp;				\
        -:   48:    }						\
        -:   49:  while (0)
        -:   50:
        -:   51:/* The name this program was run with. */
        -:   52:char *program_name;
        -:   53:
        -:   54:/* True if the LC_COLLATE locale is hard.  */
        -:   55:static bool hard_LC_COLLATE;
        -:   56:
        -:   57:/* Number of fields to skip on each line when doing comparisons. */
        -:   58:static size_t skip_fields;
        -:   59:
        -:   60:/* Number of chars to skip after skipping any fields. */
        -:   61:static size_t skip_chars;
        -:   62:
        -:   63:/* Number of chars to compare. */
        -:   64:static size_t check_chars;
        -:   65:
        -:   66:enum countmode
        -:   67:{
        -:   68:  count_occurrences,		/* -c Print count before output lines. */
        -:   69:  count_none			/* Default.  Do not print counts. */
        -:   70:};
        -:   71:
        -:   72:/* Whether and how to precede the output lines with a count of the number of
        -:   73:   times they occurred in the input. */
        -:   74:static enum countmode countmode;
        -:   75:
        -:   76:/* Which lines to output: unique lines, the first of a group of
        -:   77:   repeated lines, and the second and subsequented of a group of
        -:   78:   repeated lines.  */
        -:   79:static bool output_unique;
        -:   80:static bool output_first_repeated;
        -:   81:static bool output_later_repeated;
        -:   82:
        -:   83:/* If true, ignore case when comparing.  */
        -:   84:static bool ignore_case;
        -:   85:
        -:   86:enum delimit_method
        -:   87:{
        -:   88:  /* No delimiters output.  --all-repeated[=none] */
        -:   89:  DM_NONE,
        -:   90:
        -:   91:  /* Delimiter precedes all groups.  --all-repeated=prepend */
        -:   92:  DM_PREPEND,
        -:   93:
        -:   94:  /* Delimit all groups.  --all-repeated=separate */
        -:   95:  DM_SEPARATE
        -:   96:};
        -:   97:
        -:   98:static char const *const delimit_method_string[] =
        -:   99:{
        -:  100:  "none", "prepend", "separate", NULL
        -:  101:};
        -:  102:
        -:  103:static enum delimit_method const delimit_method_map[] =
        -:  104:{
        -:  105:  DM_NONE, DM_PREPEND, DM_SEPARATE
        -:  106:};
        -:  107:
        -:  108:/* Select whether/how to delimit groups of duplicate lines.  */
        -:  109:static enum delimit_method delimit_groups;
        -:  110:
        -:  111:static struct option const longopts[] =
        -:  112:{
        -:  113:  {"count", no_argument, NULL, 'c'},
        -:  114:  {"repeated", no_argument, NULL, 'd'},
        -:  115:  {"all-repeated", optional_argument, NULL, 'D'},
        -:  116:  {"ignore-case", no_argument, NULL, 'i'},
        -:  117:  {"unique", no_argument, NULL, 'u'},
        -:  118:  {"skip-fields", required_argument, NULL, 'f'},
        -:  119:  {"skip-chars", required_argument, NULL, 's'},
        -:  120:  {"check-chars", required_argument, NULL, 'w'},
        -:  121:  {"zero-terminated", no_argument, NULL, 'z'},
        -:  122:  {GETOPT_HELP_OPTION_DECL},
        -:  123:  {GETOPT_VERSION_OPTION_DECL},
        -:  124:  {NULL, 0, NULL, 0}
        -:  125:};
        -:  126:
        -:  127:void
    #####:  128:usage (int status)
        -:  129:{
    #####:  130:  if (status != EXIT_SUCCESS)
    #####:  131:    fprintf (stderr, _("Try `%s --help' for more information.\n"),
        -:  132:	     program_name);
        -:  133:  else
        -:  134:    {
    #####:  135:      printf (_("\
        -:  136:Usage: %s [OPTION]... [INPUT [OUTPUT]]\n\
        -:  137:"),
        -:  138:	      program_name);
    #####:  139:      fputs (_("\
        -:  140:Discard all but one of successive identical lines from INPUT (or\n\
        -:  141:standard input), writing to OUTPUT (or standard output).\n\
        -:  142:\n\
        -:  143:"), stdout);
    #####:  144:     fputs (_("\
        -:  145:Mandatory arguments to long options are mandatory for short options too.\n\
        -:  146:"), stdout);
    #####:  147:     fputs (_("\
        -:  148:  -c, --count           prefix lines by the number of occurrences\n\
        -:  149:  -d, --repeated        only print duplicate lines\n\
        -:  150:"), stdout);
    #####:  151:     fputs (_("\
        -:  152:  -D, --all-repeated[=delimit-method]  print all duplicate lines\n\
        -:  153:                        delimit-method={none(default),prepend,separate}\n\
        -:  154:                        Delimiting is done with blank lines.\n\
        -:  155:  -f, --skip-fields=N   avoid comparing the first N fields\n\
        -:  156:  -i, --ignore-case     ignore differences in case when comparing\n\
        -:  157:  -s, --skip-chars=N    avoid comparing the first N characters\n\
        -:  158:  -u, --unique          only print unique lines\n\
        -:  159:  -z, --zero-terminated  end lines with 0 byte, not newline\n\
        -:  160:"), stdout);
    #####:  161:     fputs (_("\
        -:  162:  -w, --check-chars=N   compare no more than N characters in lines\n\
        -:  163:"), stdout);
    #####:  164:     fputs (HELP_OPTION_DESCRIPTION, stdout);
    #####:  165:     fputs (VERSION_OPTION_DESCRIPTION, stdout);
    #####:  166:     fputs (_("\
        -:  167:\n\
        -:  168:A field is a run of whitespace, then non-whitespace characters.\n\
        -:  169:Fields are skipped before chars.\n\
        -:  170:"), stdout);
    #####:  171:      emit_bug_reporting_address ();
        -:  172:    }
    #####:  173:  exit (status);
        -:  174:}
        -:  175:
        -:  176:/* Convert OPT to size_t, reporting an error using MSGID if OPT is
        -:  177:   invalid.  Silently convert too-large values to SIZE_MAX.  */
        -:  178:
        -:  179:static size_t
    #####:  180:size_opt (char const *opt, char const *msgid)
        -:  181:{
        -:  182:  unsigned long int size;
        -:  183:  verify (SIZE_MAX <= ULONG_MAX);
        -:  184:
    #####:  185:  switch (xstrtoul (opt, NULL, 10, &size, ""))
        -:  186:    {
        -:  187:    case LONGINT_OK:
        -:  188:    case LONGINT_OVERFLOW:
    #####:  189:      break;
        -:  190:
        -:  191:    default:
    #####:  192:      error (EXIT_FAILURE, 0, "%s: %s", opt, _(msgid));
        -:  193:    }
        -:  194:
    #####:  195:  return MIN (size, SIZE_MAX);
        -:  196:}
        -:  197:
        -:  198:/* Given a linebuffer LINE,
        -:  199:   return a pointer to the beginning of the line's field to be compared. */
        -:  200:
        -:  201:static char *
      200:  202:find_field (const struct linebuffer *line)
        -:  203:{
        -:  204:  size_t count;
      200:  205:  char *lp = line->buffer;
      200:  206:  size_t size = line->length - 1;
      200:  207:  size_t i = 0;
        -:  208:
      200:  209:  for (count = 0; count < skip_fields && i < size; count++)
        -:  210:    {
    #####:  211:      while (i < size && isblank (lp[i]))
    #####:  212:	i++;
    #####:  213:      while (i < size && !isblank (lp[i]))
    #####:  214:	i++;
        -:  215:    }
        -:  216:
      200:  217:  for (count = 0; count < skip_chars && i < size; count++)
    #####:  218:    i++;
        -:  219:
      200:  220:  return lp + i;
        -:  221:}
        -:  222:
        -:  223:/* Return false if two strings OLD and NEW match, true if not.
        -:  224:   OLD and NEW point not to the beginnings of the lines
        -:  225:   but rather to the beginnings of the fields to compare.
        -:  226:   OLDLEN and NEWLEN are their lengths. */
        -:  227:
        -:  228:static bool
      198:  229:different (char *old, char *new, size_t oldlen, size_t newlen)
        -:  230:{
      198:  231:  if (check_chars < oldlen)
    #####:  232:    oldlen = check_chars;
      198:  233:  if (check_chars < newlen)
    #####:  234:    newlen = check_chars;
        -:  235:
      198:  236:  if (ignore_case)
        -:  237:    {
        -:  238:      /* FIXME: This should invoke strcoll somehow.  */
    #####:  239:      return oldlen != newlen || memcasecmp (old, new, oldlen);
        -:  240:    }
      198:  241:  else if (hard_LC_COLLATE)
    #####:  242:    return xmemcoll (old, oldlen, new, newlen) != 0;
        -:  243:  else
      198:  244:    return oldlen != newlen || memcmp (old, new, oldlen);
        -:  245:}
        -:  246:
        -:  247:/* Output the line in linebuffer LINE to standard output
        -:  248:   provided that the switches say it should be output.
        -:  249:   MATCH is true if the line matches the previous line.
        -:  250:   If requested, print the number of times it occurred, as well;
        -:  251:   LINECOUNT + 1 is the number of times that the line occurred. */
        -:  252:
        -:  253:static void
      200:  254:writeline (struct linebuffer const *line,
        -:  255:	   bool match, uintmax_t linecount)
        -:  256:{
      200:  257:  if (! (linecount == 0 ? output_unique
    #####:  258:	 : !match ? output_first_repeated
        -:  259:	 : output_later_repeated))
      400:  260:    return;
        -:  261:
    #####:  262:  if (countmode == count_occurrences)
    #####:  263:    printf ("%7" PRIuMAX " ", linecount + 1);
        -:  264:
    #####:  265:  fwrite (line->buffer, sizeof (char), line->length, stdout);
        -:  266:}
        -:  267:
        -:  268:/* Process input file INFILE with output to OUTFILE.
        -:  269:   If either is "-", use the standard I/O stream for it instead. */
        -:  270:
        -:  271:static void
        2:  272:check_file (const char *infile, const char *outfile, char delimiter)
        -:  273:{
        -:  274:  struct linebuffer lb1, lb2;
        -:  275:  struct linebuffer *thisline, *prevline;
        -:  276:
        2:  277:  if (! (STREQ (infile, "-") || freopen (infile, "r", stdin)))
    #####:  278:    error (EXIT_FAILURE, errno, "%s", infile);
        2:  279:  if (! (STREQ (outfile, "-") || freopen (outfile, "w", stdout)))
    #####:  280:    error (EXIT_FAILURE, errno, "%s", outfile);
        -:  281:
        2:  282:  thisline = &lb1;
        2:  283:  prevline = &lb2;
        -:  284:
        2:  285:  initbuffer (thisline);
        2:  286:  initbuffer (prevline);
        -:  287:
        -:  288:  /* The duplication in the following `if' and `else' blocks is an
        -:  289:     optimization to distinguish the common case (in which none of
        -:  290:     the following options has been specified: --count, -repeated,
        -:  291:     --all-repeated, --unique) from the others.  In the common case,
        -:  292:     this optimization lets uniq output each different line right away,
        -:  293:     without waiting to see if the next one is different.  */
        -:  294:
        2:  295:  if (output_unique && output_first_repeated && countmode == count_none)
    #####:  296:    {
        -:  297:      char *prevfield IF_LINT (= NULL);
        -:  298:      size_t prevlen IF_LINT (= 0);
        -:  299:
    #####:  300:      while (!feof (stdin))
        -:  301:	{
        -:  302:	  char *thisfield;
        -:  303:	  size_t thislen;
    #####:  304:	  if (readlinebuffer_delim (thisline, stdin, delimiter) == 0)
    #####:  305:	    break;
    #####:  306:	  thisfield = find_field (thisline);
    #####:  307:	  thislen = thisline->length - 1 - (thisfield - thisline->buffer);
    #####:  308:	  if (prevline->length == 0
    #####:  309:	      || different (thisfield, prevfield, thislen, prevlen))
        -:  310:	    {
    #####:  311:	      fwrite (thisline->buffer, sizeof (char),
        -:  312:		      thisline->length, stdout);
        -:  313:
    #####:  314:	      SWAP_LINES (prevline, thisline);
    #####:  315:	      prevfield = thisfield;
    #####:  316:	      prevlen = thislen;
        -:  317:	    }
        -:  318:	}
        -:  319:    }
        -:  320:  else
        -:  321:    {
        -:  322:      char *prevfield;
        -:  323:      size_t prevlen;
        2:  324:      uintmax_t match_count = 0;
        2:  325:      bool first_delimiter = true;
        -:  326:
        2:  327:      if (readlinebuffer_delim (prevline, stdin, delimiter) == 0)
    #####:  328:	goto closefiles;
        2:  329:      prevfield = find_field (prevline);
        2:  330:      prevlen = prevline->length - 1 - (prevfield - prevline->buffer);
        -:  331:
      202:  332:      while (!feof (stdin))
        -:  333:	{
        -:  334:	  bool match;
        -:  335:	  char *thisfield;
        -:  336:	  size_t thislen;
      200:  337:	  if (readlinebuffer_delim (thisline, stdin, delimiter) == 0)
        -:  338:	    {
        2:  339:	      if (ferror (stdin))
    #####:  340:		goto closefiles;
        2:  341:	      break;
        -:  342:	    }
      198:  343:	  thisfield = find_field (thisline);
      198:  344:	  thislen = thisline->length - 1 - (thisfield - thisline->buffer);
      198:  345:	  match = !different (thisfield, prevfield, thislen, prevlen);
      198:  346:	  match_count += match;
        -:  347:
      198:  348:	  if (match_count == UINTMAX_MAX)
        -:  349:	    {
        -:  350:	      if (count_occurrences)
        -:  351:		error (EXIT_FAILURE, 0, _("too many repeated lines"));
    #####:  352:	      match_count--;
        -:  353:	    }
        -:  354:
      198:  355:          if (delimit_groups != DM_NONE)
        -:  356:	    {
    #####:  357:	      if (!match)
        -:  358:		{
    #####:  359:		  if (match_count) /* a previous match */
    #####:  360:		    first_delimiter = false; /* Only used when DM_SEPARATE */
        -:  361:		}
    #####:  362:	      else if (match_count == 1)
        -:  363:		{
    #####:  364:		  if ((delimit_groups == DM_PREPEND)
    #####:  365:		      || (delimit_groups == DM_SEPARATE
    #####:  366:			  && !first_delimiter))
    #####:  367:		    putchar (delimiter);
        -:  368:		}
        -:  369:	    }
        -:  370:
      198:  371:	  if (!match || output_later_repeated)
        -:  372:	    {
      198:  373:	      writeline (prevline, match, match_count);
      198:  374:	      SWAP_LINES (prevline, thisline);
      198:  375:	      prevfield = thisfield;
      198:  376:	      prevlen = thislen;
      198:  377:	      if (!match)
      198:  378:		match_count = 0;
        -:  379:	    }
        -:  380:	}
        -:  381:
        2:  382:      writeline (prevline, false, match_count);
        -:  383:    }
        -:  384:
        -:  385: closefiles:
        2:  386:  if (ferror (stdin) || fclose (stdin) != 0)
    #####:  387:    error (EXIT_FAILURE, 0, _("error reading %s"), infile);
        -:  388:
        -:  389:  /* stdout is handled via the atexit-invoked close_stdout function.  */
        -:  390:
        2:  391:  free (lb1.buffer);
        2:  392:  free (lb2.buffer);
        2:  393:}
        -:  394:
        -:  395:enum Skip_field_option_type
        -:  396:  {
        -:  397:    SFO_NONE,
        -:  398:    SFO_OBSOLETE,
        -:  399:    SFO_NEW
        -:  400:  };
        -:  401:
        -:  402:int
        2:  403:main (int argc, char **argv)
        -:  404:{
        2:  405:  int optc = 0;
        2:  406:  bool posixly_correct = (getenv ("POSIXLY_CORRECT") != NULL);
        2:  407:  enum Skip_field_option_type skip_field_option_type = SFO_NONE;
        2:  408:  int nfiles = 0;
        -:  409:  char const *file[2];
        2:  410:  char delimiter = '\n';	/* change with --zero-terminated, -z */
        -:  411:
        2:  412:  file[0] = file[1] = "-";
        -:  413:  initialize_main (&argc, &argv);
        2:  414:  program_name = argv[0];
        2:  415:  setlocale (LC_ALL, "");
        -:  416:  bindtextdomain (PACKAGE, LOCALEDIR);
        -:  417:  textdomain (PACKAGE);
        2:  418:  hard_LC_COLLATE = hard_locale (LC_COLLATE);
        -:  419:
        2:  420:  atexit (close_stdout);
        -:  421:
        2:  422:  skip_chars = 0;
        2:  423:  skip_fields = 0;
        2:  424:  check_chars = SIZE_MAX;
        2:  425:  output_unique = output_first_repeated = true;
        2:  426:  output_later_repeated = false;
        2:  427:  countmode = count_none;
        2:  428:  delimit_groups = DM_NONE;
        -:  429:
        -:  430:  for (;;)
        -:  431:    {
        -:  432:      /* Parse an operand with leading "+" as a file after "--" was
        -:  433:         seen; or if pedantic and a file was seen; or if not
        -:  434:         obsolete.  */
        -:  435:
        4:  436:      if (optc == -1
        4:  437:	  || (posixly_correct && nfiles != 0)
        4:  438:	  || ((optc = getopt_long (argc, argv,
        -:  439:				   "-0123456789Dcdf:is:uw:z", longopts, NULL))
        -:  440:	      == -1))
        -:  441:	{
        2:  442:	  if (argc <= optind)
        2:  443:	    break;
    #####:  444:	  if (nfiles == 2)
        -:  445:	    {
    #####:  446:	      error (0, 0, _("extra operand %s"), quote (argv[optind]));
    #####:  447:	      usage (EXIT_FAILURE);
        -:  448:	    }
    #####:  449:	  file[nfiles++] = argv[optind++];
        -:  450:	}
        2:  451:      else switch (optc)
        -:  452:	{
        -:  453:	case 1:
        -:  454:	  {
        -:  455:	    unsigned long int size;
    #####:  456:	    if (optarg[0] == '+'
    #####:  457:		&& posix2_version () < 200112
    #####:  458:		&& xstrtoul (optarg, NULL, 10, &size, "") == LONGINT_OK
        -:  459:		&& size <= SIZE_MAX)
    #####:  460:	      skip_chars = size;
    #####:  461:	    else if (nfiles == 2)
        -:  462:	      {
    #####:  463:		error (0, 0, _("extra operand %s"), quote (optarg));
    #####:  464:		usage (EXIT_FAILURE);
        -:  465:	      }
        -:  466:	    else
    #####:  467:	      file[nfiles++] = optarg;
        -:  468:	  }
    #####:  469:	  break;
        -:  470:
        -:  471:	case '0':
        -:  472:	case '1':
        -:  473:	case '2':
        -:  474:	case '3':
        -:  475:	case '4':
        -:  476:	case '5':
        -:  477:	case '6':
        -:  478:	case '7':
        -:  479:	case '8':
        -:  480:	case '9':
        -:  481:	  {
    #####:  482:	    if (skip_field_option_type == SFO_NEW)
    #####:  483:	      skip_fields = 0;
        -:  484:
    #####:  485:	    if (!DECIMAL_DIGIT_ACCUMULATE (skip_fields, optc - '0', size_t))
    #####:  486:	      skip_fields = SIZE_MAX;
        -:  487:
    #####:  488:	    skip_field_option_type = SFO_OBSOLETE;
        -:  489:	  }
    #####:  490:	  break;
        -:  491:
        -:  492:	case 'c':
    #####:  493:	  countmode = count_occurrences;
    #####:  494:	  break;
        -:  495:
        -:  496:	case 'd':
        2:  497:	  output_unique = false;
        2:  498:	  break;
        -:  499:
        -:  500:	case 'D':
    #####:  501:	  output_unique = false;
    #####:  502:	  output_later_repeated = true;
    #####:  503:	  if (optarg == NULL)
    #####:  504:	    delimit_groups = DM_NONE;
        -:  505:	  else
    #####:  506:	    delimit_groups = XARGMATCH ("--all-repeated", optarg,
        -:  507:					delimit_method_string,
        -:  508:					delimit_method_map);
    #####:  509:	  break;
        -:  510:
        -:  511:	case 'f':
    #####:  512:	  skip_field_option_type = SFO_NEW;
    #####:  513:	  skip_fields = size_opt (optarg,
        -:  514:				  N_("invalid number of fields to skip"));
    #####:  515:	  break;
        -:  516:
        -:  517:	case 'i':
    #####:  518:	  ignore_case = true;
    #####:  519:	  break;
        -:  520:
        -:  521:	case 's':
    #####:  522:	  skip_chars = size_opt (optarg,
        -:  523:				 N_("invalid number of bytes to skip"));
    #####:  524:	  break;
        -:  525:
        -:  526:	case 'u':
    #####:  527:	  output_first_repeated = false;
    #####:  528:	  break;
        -:  529:
        -:  530:	case 'w':
    #####:  531:	  check_chars = size_opt (optarg,
        -:  532:				  N_("invalid number of bytes to compare"));
    #####:  533:	  break;
        -:  534:
        -:  535:	case 'z':
    #####:  536:	  delimiter = '\0';
    #####:  537:	  break;
        -:  538:
    #####:  539:	case_GETOPT_HELP_CHAR;
        -:  540:
    #####:  541:	case_GETOPT_VERSION_CHAR (PROGRAM_NAME, AUTHORS);
        -:  542:
        -:  543:	default:
    #####:  544:	  usage (EXIT_FAILURE);
        -:  545:	}
        2:  546:    }
        -:  547:
        2:  548:  if (countmode == count_occurrences && output_later_repeated)
        -:  549:    {
    #####:  550:      error (0, 0,
        -:  551:	   _("printing all duplicated lines and repeat counts is meaningless"));
    #####:  552:      usage (EXIT_FAILURE);
        -:  553:    }
        -:  554:
        2:  555:  check_file (file[0], file[1], delimiter);
        -:  556:
        2:  557:  exit (EXIT_SUCCESS);
        -:  558:}
