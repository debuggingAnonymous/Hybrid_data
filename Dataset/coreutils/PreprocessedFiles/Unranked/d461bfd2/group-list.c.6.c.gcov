        -:    0:Source:src/group-list.c
        -:    0:Graph:src/group-list.gcno
        -:    0:Data:src/group-list.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* group-list.c --Print a list of group IDs or names.
        -:    2:   Copyright (C) 1989-2013 Free Software Foundation, Inc.
        -:    3:
        -:    4:   This program is free software: you can redistribute it and/or modify
        -:    5:   it under the terms of the GNU General Public License as published by
        -:    6:   the Free Software Foundation, either version 3 of the License, or
        -:    7:   (at your option) any later version.
        -:    8:
        -:    9:   This program is distributed in the hope that it will be useful,
        -:   10:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   11:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   12:   GNU General Public License for more details.
        -:   13:
        -:   14:   You should have received a copy of the GNU General Public License
        -:   15:   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
        -:   16:
        -:   17:/* Written by Arnold Robbins.
        -:   18:   Major rewrite by David MacKenzie, djm@gnu.ai.mit.edu.
        -:   19:   Extracted from id.c by James Youngman. */
        -:   20:
        -:   21:#include <config.h>
        -:   22:#include <stdio.h>
        -:   23:#include <sys/types.h>
        -:   24:#include <pwd.h>
        -:   25:#include <grp.h>
        -:   26:
        -:   27:#include "system.h"
        -:   28:#include "error.h"
        -:   29:#include "mgetgroups.h"
        -:   30:#include "quote.h"
        -:   31:#include "group-list.h"
        -:   32:
        -:   33:
        -:   34:/* Print all of the distinct groups the user is in. */
        -:   35:extern bool
    #####:   36:print_group_list (const char *username,
        -:   37:                  uid_t ruid, gid_t rgid, gid_t egid,
        -:   38:                  bool use_names)
        -:   39:{
    #####:   40:  bool ok = true;
    #####:   41:  struct passwd *pwd = NULL;
        -:   42:
    #####:   43:  if (username)
        -:   44:    {
    #####:   45:      pwd = getpwuid (ruid);
    #####:   46:      if (pwd == NULL)
    #####:   47:        ok = false;
        -:   48:    }
        -:   49:
    #####:   50:  if (!print_group (rgid, use_names))
    #####:   51:    ok = false;
        -:   52:
    #####:   53:  if (egid != rgid)
        -:   54:    {
    #####:   55:      putchar (' ');
    #####:   56:      if (!print_group (egid, use_names))
    #####:   57:        ok = false;
        -:   58:    }
        -:   59:
        -:   60:  {
        -:   61:    gid_t *groups;
        -:   62:    int i;
        -:   63:
    #####:   64:    int n_groups = xgetgroups (username, (pwd ? pwd->pw_gid : egid), &groups);
    #####:   65:    if (n_groups < 0)
        -:   66:      {
    #####:   67:        if (username)
        -:   68:          {
    #####:   69:            error (0, errno, _("failed to get groups for user %s"),
        -:   70:                   quote (username));
        -:   71:          }
        -:   72:        else
        -:   73:          {
    #####:   74:            error (0, errno, _("failed to get groups for the current process"));
        -:   75:          }
    #####:   76:        return false;
        -:   77:      }
        -:   78:
    #####:   79:    for (i = 0; i < n_groups; i++)
    #####:   80:      if (groups[i] != rgid && groups[i] != egid)
        -:   81:        {
    #####:   82:          putchar (' ');
    #####:   83:          if (!print_group (groups[i], use_names))
    #####:   84:            ok = false;
        -:   85:        }
    #####:   86:    free (groups);
        -:   87:  }
    #####:   88:  return ok;
        -:   89:}
        -:   90:
        -:   91:/* Convert a gid_t to string.  Do not use this function directly.
        -:   92:   Instead, use it via the gidtostr macro.
        -:   93:   Beware that it returns a pointer to static storage.  */
        -:   94:static char *
    #####:   95:gidtostr_ptr (gid_t const *gid)
        -:   96:{
        -:   97:  static char buf[INT_BUFSIZE_BOUND (uintmax_t)];
    #####:   98:  return umaxtostr (*gid, buf);
        -:   99:}
        -:  100:#define gidtostr(g) gidtostr_ptr (&(g))
        -:  101:
        -:  102:/* Print the name or value of group ID GID. */
        -:  103:extern bool
    #####:  104:print_group (gid_t gid, bool use_name)
        -:  105:{
    #####:  106:  struct group *grp = NULL;
    #####:  107:  bool ok = true;
        -:  108:
    #####:  109:  if (use_name)
        -:  110:    {
    #####:  111:      grp = getgrgid (gid);
    #####:  112:      if (grp == NULL)
        -:  113:        {
    #####:  114:          error (0, 0, _("cannot find name for group ID %lu"),
        -:  115:                 (unsigned long int) gid);
    #####:  116:          ok = false;
        -:  117:        }
        -:  118:    }
        -:  119:
    #####:  120:  char *s = grp ? grp->gr_name : gidtostr (gid);
    #####:  121:  fputs (s, stdout);
    #####:  122:  return ok;
        -:  123:}
