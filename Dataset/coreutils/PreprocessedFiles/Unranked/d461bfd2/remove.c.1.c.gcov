        -:    0:Source:src/remove.c
        -:    0:Graph:src/remove.gcno
        -:    0:Data:src/remove.gcda
        -:    0:Runs:3
        -:    0:Programs:2
        -:    1:/* remove.c -- core functions for removing files and directories
        -:    2:   Copyright (C) 1988-2013 Free Software Foundation, Inc.
        -:    3:
        -:    4:   This program is free software: you can redistribute it and/or modify
        -:    5:   it under the terms of the GNU General Public License as published by
        -:    6:   the Free Software Foundation, either version 3 of the License, or
        -:    7:   (at your option) any later version.
        -:    8:
        -:    9:   This program is distributed in the hope that it will be useful,
        -:   10:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   11:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   12:   GNU General Public License for more details.
        -:   13:
        -:   14:   You should have received a copy of the GNU General Public License
        -:   15:   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
        -:   16:
        -:   17:/* Extracted from rm.c, librarified, then rewritten twice by Jim Meyering.  */
        -:   18:
        -:   19:#include <config.h>
        -:   20:#include <stdio.h>
        -:   21:#include <sys/types.h>
        -:   22:#include <assert.h>
        -:   23:
        -:   24:#include "system.h"
        -:   25:#include "error.h"
        -:   26:#include "file-type.h"
        -:   27:#include "ignore-value.h"
        -:   28:#include "quote.h"
        -:   29:#include "remove.h"
        -:   30:#include "root-dev-ino.h"
        -:   31:#include "write-any-file.h"
        -:   32:#include "xfts.h"
        -:   33:#include "yesno.h"
        -:   34:
        -:   35:enum Ternary
        -:   36:  {
        -:   37:    T_UNKNOWN = 2,
        -:   38:    T_NO,
        -:   39:    T_YES
        -:   40:  };
        -:   41:typedef enum Ternary Ternary;
        -:   42:
        -:   43:/* The prompt function may be called twice for a given directory.
        -:   44:   The first time, we ask whether to descend into it, and the
        -:   45:   second time, we ask whether to remove it.  */
        -:   46:enum Prompt_action
        -:   47:  {
        -:   48:    PA_DESCEND_INTO_DIR = 2,
        -:   49:    PA_REMOVE_DIR
        -:   50:  };
        -:   51:
        -:   52:/* D_TYPE(D) is the type of directory entry D if known, DT_UNKNOWN
        -:   53:   otherwise.  */
        -:   54:#if ! HAVE_STRUCT_DIRENT_D_TYPE
        -:   55:/* Any int values will do here, so long as they're distinct.
        -:   56:   Undef any existing macros out of the way.  */
        -:   57:# undef DT_UNKNOWN
        -:   58:# undef DT_DIR
        -:   59:# undef DT_LNK
        -:   60:# define DT_UNKNOWN 0
        -:   61:# define DT_DIR 1
        -:   62:# define DT_LNK 2
        -:   63:#endif
        -:   64:
        -:   65:/* Like fstatat, but cache the result.  If ST->st_size is -1, the
        -:   66:   status has not been gotten yet.  If less than -1, fstatat failed
        -:   67:   with errno == ST->st_ino.  Otherwise, the status has already
        -:   68:   been gotten, so return 0.  */
        -:   69:static int
    #####:   70:cache_fstatat (int fd, char const *file, struct stat *st, int flag)
        -:   71:{
    #####:   72:  if (st->st_size == -1 && fstatat (fd, file, st, flag) != 0)
        -:   73:    {
    #####:   74:      st->st_size = -2;
    #####:   75:      st->st_ino = errno;
        -:   76:    }
    #####:   77:  if (0 <= st->st_size)
    #####:   78:    return 0;
    #####:   79:  errno = (int) st->st_ino;
    #####:   80:  return -1;
        -:   81:}
        -:   82:
        -:   83:/* Initialize a fstatat cache *ST.  Return ST for convenience.  */
        -:   84:static inline struct stat *
        5:   85:cache_stat_init (struct stat *st)
        -:   86:{
        5:   87:  st->st_size = -1;
        5:   88:  return st;
        -:   89:}
        -:   90:
        -:   91:/* Return 1 if FILE is an unwritable non-symlink,
        -:   92:   0 if it is writable or some other type of file,
        -:   93:   -1 and set errno if there is some problem in determining the answer.
        -:   94:   Set *BUF to the file status.  */
        -:   95:static int
    #####:   96:write_protected_non_symlink (int fd_cwd,
        -:   97:                             char const *file,
        -:   98:                             struct stat *buf)
        -:   99:{
    #####:  100:  if (can_write_any_file ())
    #####:  101:    return 0;
    #####:  102:  if (cache_fstatat (fd_cwd, file, buf, AT_SYMLINK_NOFOLLOW) != 0)
    #####:  103:    return -1;
    #####:  104:  if (S_ISLNK (buf->st_mode))
    #####:  105:    return 0;
        -:  106:  /* Here, we know FILE is not a symbolic link.  */
        -:  107:
        -:  108:  /* In order to be reentrant -- i.e., to avoid changing the working
        -:  109:     directory, and at the same time to be able to deal with alternate
        -:  110:     access control mechanisms (ACLs, xattr-style attributes) and
        -:  111:     arbitrarily deep trees -- we need a function like eaccessat, i.e.,
        -:  112:     like Solaris' eaccess, but fd-relative, in the spirit of openat.  */
        -:  113:
        -:  114:  /* In the absence of a native eaccessat function, here are some of
        -:  115:     the implementation choices [#4 and #5 were suggested by Paul Eggert]:
        -:  116:     1) call openat with O_WRONLY|O_NOCTTY
        -:  117:        Disadvantage: may create the file and doesn't work for directory,
        -:  118:        may mistakenly report 'unwritable' for EROFS or ACLs even though
        -:  119:        perm bits say the file is writable.
        -:  120:
        -:  121:     2) fake eaccessat (save_cwd, fchdir, call euidaccess, restore_cwd)
        -:  122:        Disadvantage: changes working directory (not reentrant) and can't
        -:  123:        work if save_cwd fails.
        -:  124:
        -:  125:     3) if (euidaccess (full_name, W_OK) == 0)
        -:  126:        Disadvantage: doesn't work if full_name is too long.
        -:  127:        Inefficient for very deep trees (O(Depth^2)).
        -:  128:
        -:  129:     4) If the full pathname is sufficiently short (say, less than
        -:  130:        PATH_MAX or 8192 bytes, whichever is shorter):
        -:  131:        use method (3) (i.e., euidaccess (full_name, W_OK));
        -:  132:        Otherwise: vfork, fchdir in the child, run euidaccess in the
        -:  133:        child, then the child exits with a status that tells the parent
        -:  134:        whether euidaccess succeeded.
        -:  135:
        -:  136:        This avoids the O(N**2) algorithm of method (3), and it also avoids
        -:  137:        the failure-due-to-too-long-file-names of method (3), but it's fast
        -:  138:        in the normal shallow case.  It also avoids the lack-of-reentrancy
        -:  139:        and the save_cwd problems.
        -:  140:        Disadvantage; it uses a process slot for very-long file names,
        -:  141:        and would be very slow for hierarchies with many such files.
        -:  142:
        -:  143:     5) If the full file name is sufficiently short (say, less than
        -:  144:        PATH_MAX or 8192 bytes, whichever is shorter):
        -:  145:        use method (3) (i.e., euidaccess (full_name, W_OK));
        -:  146:        Otherwise: look just at the file bits.  Perhaps issue a warning
        -:  147:        the first time this occurs.
        -:  148:
        -:  149:        This is like (4), except for the "Otherwise" case where it isn't as
        -:  150:        "perfect" as (4) but is considerably faster.  It conforms to current
        -:  151:        POSIX, and is uniformly better than what Solaris and FreeBSD do (they
        -:  152:        mess up with long file names). */
        -:  153:
        -:  154:  {
    #####:  155:    if (faccessat (fd_cwd, file, W_OK, AT_EACCESS) == 0)
    #####:  156:      return 0;
        -:  157:
    #####:  158:    return errno == EACCES ? 1 : -1;
        -:  159:  }
        -:  160:}
        -:  161:
        -:  162:/* Prompt whether to remove FILENAME (ent->, if required via a combination of
        -:  163:   the options specified by X and/or file attributes.  If the file may
        -:  164:   be removed, return RM_OK.  If the user declines to remove the file,
        -:  165:   return RM_USER_DECLINED.  If not ignoring missing files and we
        -:  166:   cannot lstat FILENAME, then return RM_ERROR.
        -:  167:
        -:  168:   IS_DIR is true if ENT designates a directory, false otherwise.
        -:  169:
        -:  170:   Depending on MODE, ask whether to 'descend into' or to 'remove' the
        -:  171:   directory FILENAME.  MODE is ignored when FILENAME is not a directory.
        -:  172:   Set *IS_EMPTY_P to T_YES if FILENAME is an empty directory, and it is
        -:  173:   appropriate to try to remove it with rmdir (e.g. recursive mode).
        -:  174:   Don't even try to set *IS_EMPTY_P when MODE == PA_REMOVE_DIR.  */
        -:  175:static enum RM_status
        5:  176:prompt (FTS const *fts, FTSENT const *ent, bool is_dir,
        -:  177:        struct rm_options const *x, enum Prompt_action mode,
        -:  178:        Ternary *is_empty_p)
        -:  179:{
        5:  180:  int fd_cwd = fts->fts_cwd_fd;
        5:  181:  char const *full_name = ent->fts_path;
        5:  182:  char const *filename = ent->fts_accpath;
        5:  183:  if (is_empty_p)
    #####:  184:    *is_empty_p = T_UNKNOWN;
        -:  185:
        -:  186:  struct stat st;
        5:  187:  struct stat *sbuf = &st;
        5:  188:  cache_stat_init (sbuf);
        -:  189:
        5:  190:  int dirent_type = is_dir ? DT_DIR : DT_UNKNOWN;
        5:  191:  int write_protected = 0;
        -:  192:
        5:  193:  bool is_empty = false;
        5:  194:  if (is_empty_p)
        -:  195:    {
    #####:  196:      is_empty = is_empty_dir (fd_cwd, filename);
    #####:  197:      *is_empty_p = is_empty ? T_YES : T_NO;
        -:  198:    }
        -:  199:
        -:  200:  /* When nonzero, this indicates that we failed to remove a child entry,
        -:  201:     either because the user declined an interactive prompt, or due to
        -:  202:     some other failure, like permissions.  */
        5:  203:  if (ent->fts_number)
    #####:  204:    return RM_USER_DECLINED;
        -:  205:
        5:  206:  if (x->interactive == RMI_NEVER)
        5:  207:    return RM_OK;
        -:  208:
    #####:  209:  int wp_errno = 0;
    #####:  210:  if (!x->ignore_missing_files
    #####:  211:      && ((x->interactive == RMI_ALWAYS) || x->stdin_tty)
    #####:  212:      && dirent_type != DT_LNK)
        -:  213:    {
    #####:  214:      write_protected = write_protected_non_symlink (fd_cwd, filename, sbuf);
    #####:  215:      wp_errno = errno;
        -:  216:    }
        -:  217:
    #####:  218:  if (write_protected || x->interactive == RMI_ALWAYS)
        -:  219:    {
    #####:  220:      if (0 <= write_protected && dirent_type == DT_UNKNOWN)
        -:  221:        {
    #####:  222:          if (cache_fstatat (fd_cwd, filename, sbuf, AT_SYMLINK_NOFOLLOW) == 0)
        -:  223:            {
    #####:  224:              if (S_ISLNK (sbuf->st_mode))
    #####:  225:                dirent_type = DT_LNK;
    #####:  226:              else if (S_ISDIR (sbuf->st_mode))
    #####:  227:                dirent_type = DT_DIR;
        -:  228:              /* Otherwise it doesn't matter, so leave it DT_UNKNOWN.  */
        -:  229:            }
        -:  230:          else
        -:  231:            {
        -:  232:              /* This happens, e.g., with 'rm '''.  */
    #####:  233:              write_protected = -1;
    #####:  234:              wp_errno = errno;
        -:  235:            }
        -:  236:        }
        -:  237:
    #####:  238:      if (0 <= write_protected)
    #####:  239:        switch (dirent_type)
        -:  240:          {
        -:  241:          case DT_LNK:
        -:  242:            /* Using permissions doesn't make sense for symlinks.  */
    #####:  243:            if (x->interactive != RMI_ALWAYS)
    #####:  244:              return RM_OK;
    #####:  245:            break;
        -:  246:
        -:  247:          case DT_DIR:
        -:  248:             /* Unless we're either deleting directories or deleting
        -:  249:                recursively, we want to raise an EISDIR error rather than
        -:  250:                prompting the user  */
    #####:  251:            if ( ! (x->recursive || (x->remove_empty_directories && is_empty)))
        -:  252:              {
    #####:  253:                write_protected = -1;
    #####:  254:                wp_errno = EISDIR;
        -:  255:              }
    #####:  256:            break;
        -:  257:          }
        -:  258:
    #####:  259:      char const *quoted_name = quote (full_name);
        -:  260:
    #####:  261:      if (write_protected < 0)
        -:  262:        {
    #####:  263:          error (0, wp_errno, _("cannot remove %s"), quoted_name);
    #####:  264:          return RM_ERROR;
        -:  265:        }
        -:  266:
        -:  267:      /* Issue the prompt.  */
    #####:  268:      if (dirent_type == DT_DIR
    #####:  269:          && mode == PA_DESCEND_INTO_DIR
    #####:  270:          && !is_empty)
    #####:  271:        fprintf (stderr,
        -:  272:                 (write_protected
        -:  273:                  ? _("%s: descend into write-protected directory %s? ")
        -:  274:                  : _("%s: descend into directory %s? ")),
        -:  275:                 program_name, quoted_name);
        -:  276:      else
        -:  277:        {
    #####:  278:          if (cache_fstatat (fd_cwd, filename, sbuf, AT_SYMLINK_NOFOLLOW) != 0)
        -:  279:            {
    #####:  280:              error (0, errno, _("cannot remove %s"), quoted_name);
    #####:  281:              return RM_ERROR;
        -:  282:            }
        -:  283:
    #####:  284:          fprintf (stderr,
        -:  285:                   (write_protected
        -:  286:                    /* TRANSLATORS: You may find it more convenient to
        -:  287:                       translate "%s: remove %s (write-protected) %s? "
        -:  288:                       instead.  It should avoid grammatical problems
        -:  289:                       with the output of file_type.  */
        -:  290:                    ? _("%s: remove write-protected %s %s? ")
        -:  291:                    : _("%s: remove %s %s? ")),
        -:  292:                   program_name, file_type (sbuf), quoted_name);
        -:  293:        }
        -:  294:
    #####:  295:      if (!yesno ())
    #####:  296:        return RM_USER_DECLINED;
        -:  297:    }
    #####:  298:  return RM_OK;
        -:  299:}
        -:  300:
        -:  301:/* When a function like unlink, rmdir, or fstatat fails with an errno
        -:  302:   value of ERRNUM, return true if the specified file system object
        -:  303:   is guaranteed not to exist;  otherwise, return false.  */
        -:  304:static inline bool
        1:  305:nonexistent_file_errno (int errnum)
        -:  306:{
        -:  307:  /* Do not include ELOOP here, since the specified file may indeed
        -:  308:     exist, but be (in)accessible only via too long a symlink chain.
        -:  309:     Likewise for ENAMETOOLONG, since rm -f ./././.../foo may fail
        -:  310:     if the "..." part expands to a long enough sequence of "./"s,
        -:  311:     even though ./foo does indeed exist.
        -:  312:
        -:  313:     Another case to consider is when a particular name is invalid for
        -:  314:     a given file system.  In 2011, smbfs returns EINVAL, but the next
        -:  315:     revision of POSIX will require EILSEQ for that situation:
        -:  316:     http://austingroupbugs.net/view.php?id=293
        -:  317:  */
        -:  318:
        1:  319:  switch (errnum)
        -:  320:    {
        -:  321:    case EILSEQ:
        -:  322:    case EINVAL:
        -:  323:    case ENOENT:
        -:  324:    case ENOTDIR:
        1:  325:      return true;
        -:  326:    default:
    #####:  327:      return false;
        -:  328:    }
        -:  329:}
        -:  330:
        -:  331:/* Encapsulate the test for whether the errno value, ERRNUM, is ignorable.  */
        -:  332:static inline bool
        1:  333:ignorable_missing (struct rm_options const *x, int errnum)
        -:  334:{
        1:  335:  return x->ignore_missing_files && nonexistent_file_errno (errnum);
        -:  336:}
        -:  337:
        -:  338:/* Tell fts not to traverse into the hierarchy at ENT.  */
        -:  339:static void
    #####:  340:fts_skip_tree (FTS *fts, FTSENT *ent)
        -:  341:{
    #####:  342:  fts_set (fts, ent, FTS_SKIP);
        -:  343:  /* Ensure that we do not process ENT a second time.  */
    #####:  344:  ignore_value (fts_read (fts));
    #####:  345:}
        -:  346:
        -:  347:/* Upon unlink failure, or when the user declines to remove ENT, mark
        -:  348:   each of its ancestor directories, so that we know not to prompt for
        -:  349:   its removal.  */
        -:  350:static void
    #####:  351:mark_ancestor_dirs (FTSENT *ent)
        -:  352:{
        -:  353:  FTSENT *p;
    #####:  354:  for (p = ent->fts_parent; FTS_ROOTLEVEL <= p->fts_level; p = p->fts_parent)
        -:  355:    {
    #####:  356:      if (p->fts_number)
    #####:  357:        break;
    #####:  358:      p->fts_number = 1;
        -:  359:    }
    #####:  360:}
        -:  361:
        -:  362:/* Remove the file system object specified by ENT.  IS_DIR specifies
        -:  363:   whether it is expected to be a directory or non-directory.
        -:  364:   Return RM_OK upon success, else RM_ERROR.  */
        -:  365:static enum RM_status
        5:  366:excise (FTS *fts, FTSENT *ent, struct rm_options const *x, bool is_dir)
        -:  367:{
        5:  368:  int flag = is_dir ? AT_REMOVEDIR : 0;
        5:  369:  if (unlinkat (fts->fts_cwd_fd, ent->fts_accpath, flag) == 0)
        -:  370:    {
        4:  371:      if (x->verbose)
        -:  372:        {
    #####:  373:          printf ((is_dir
        -:  374:                   ? _("removed directory: %s\n")
    #####:  375:                   : _("removed %s\n")), quote (ent->fts_path));
        -:  376:        }
        4:  377:      return RM_OK;
        -:  378:    }
        -:  379:
        -:  380:  /* The unlinkat from kernels like linux-2.6.32 reports EROFS even for
        -:  381:     nonexistent files.  When the file is indeed missing, map that to ENOENT,
        -:  382:     so that rm -f ignores it, as required.  Even without -f, this is useful
        -:  383:     because it makes rm print the more precise diagnostic.  */
        1:  384:  if (errno == EROFS)
        -:  385:    {
        -:  386:      struct stat st;
    #####:  387:      if ( ! (lstatat (fts->fts_cwd_fd, ent->fts_accpath, &st)
    #####:  388:                       && errno == ENOENT))
    #####:  389:        errno = EROFS;
        -:  390:    }
        -:  391:
        1:  392:  if (ignorable_missing (x, errno))
        1:  393:    return RM_OK;
        -:  394:
        -:  395:  /* When failing to rmdir an unreadable directory, we see errno values
        -:  396:     like EISDIR or ENOTDIR (or, on Solaris 10, EEXIST), but they would be
        -:  397:     meaningless in a diagnostic.  When that happens and the errno value
        -:  398:     from the failed open is EPERM or EACCES, use the earlier, more
        -:  399:     descriptive errno value.  */
    #####:  400:  if (ent->fts_info == FTS_DNR
    #####:  401:      && (errno == ENOTEMPTY || errno == EISDIR || errno == ENOTDIR
    #####:  402:          || errno == EEXIST)
    #####:  403:      && (ent->fts_errno == EPERM || ent->fts_errno == EACCES))
    #####:  404:    errno = ent->fts_errno;
    #####:  405:  error (0, errno, _("cannot remove %s"), quote (ent->fts_path));
    #####:  406:  mark_ancestor_dirs (ent);
    #####:  407:  return RM_ERROR;
        -:  408:}
        -:  409:
        -:  410:/* This function is called once for every file system object that fts
        -:  411:   encounters.  fts performs a depth-first traversal.
        -:  412:   A directory is usually processed twice, first with fts_info == FTS_D,
        -:  413:   and later, after all of its entries have been processed, with FTS_DP.
        -:  414:   Return RM_ERROR upon error, RM_USER_DECLINED for a negative response
        -:  415:   to an interactive prompt, and otherwise, RM_OK.  */
        -:  416:static enum RM_status
        5:  417:rm_fts (FTS *fts, FTSENT *ent, struct rm_options const *x)
        -:  418:{
        5:  419:  switch (ent->fts_info)
        -:  420:    {
        -:  421:    case FTS_D:			/* preorder directory */
    #####:  422:      if (! x->recursive
    #####:  423:          && !(x->remove_empty_directories
    #####:  424:               && is_empty_dir (fts->fts_cwd_fd, ent->fts_accpath)))
        -:  425:        {
        -:  426:          /* This is the first (pre-order) encounter with a directory
        -:  427:             that we cannot delete.
        -:  428:             Not recursive, and it's not an empty directory (if we're removing
        -:  429:             them) so arrange to skip contents.  */
    #####:  430:          int err = x->remove_empty_directories ? ENOTEMPTY : EISDIR;
    #####:  431:          error (0, err, _("cannot remove %s"), quote (ent->fts_path));
    #####:  432:          mark_ancestor_dirs (ent);
    #####:  433:          fts_skip_tree (fts, ent);
    #####:  434:          return RM_ERROR;
        -:  435:        }
        -:  436:
        -:  437:      /* Perform checks that can apply only for command-line arguments.  */
    #####:  438:      if (ent->fts_level == FTS_ROOTLEVEL)
        -:  439:        {
        -:  440:          /* If the basename of a command line argument is "." or "..",
        -:  441:             diagnose it and do nothing more with that argument.  */
    #####:  442:          if (dot_or_dotdot (last_component (ent->fts_accpath)))
        -:  443:            {
    #####:  444:              error (0, 0, _("cannot remove directory: %s"),
    #####:  445:                     quote (ent->fts_path));
    #####:  446:              fts_skip_tree (fts, ent);
    #####:  447:              return RM_ERROR;
        -:  448:            }
        -:  449:
        -:  450:          /* If a command line argument resolves to "/" (and --preserve-root
        -:  451:             is in effect -- default) diagnose and skip it.  */
    #####:  452:          if (ROOT_DEV_INO_CHECK (x->root_dev_ino, ent->fts_statp))
        -:  453:            {
    #####:  454:              ROOT_DEV_INO_WARN (ent->fts_path);
    #####:  455:              fts_skip_tree (fts, ent);
    #####:  456:              return RM_ERROR;
        -:  457:            }
        -:  458:        }
        -:  459:
        -:  460:      {
        -:  461:        Ternary is_empty_directory;
    #####:  462:        enum RM_status s = prompt (fts, ent, true /*is_dir*/, x,
        -:  463:                                   PA_DESCEND_INTO_DIR, &is_empty_directory);
        -:  464:
    #####:  465:        if (s == RM_OK && is_empty_directory == T_YES)
        -:  466:          {
        -:  467:            /* When we know (from prompt when in interactive mode)
        -:  468:               that this is an empty directory, don't prompt twice.  */
    #####:  469:            s = excise (fts, ent, x, true);
    #####:  470:            fts_skip_tree (fts, ent);
        -:  471:          }
        -:  472:
    #####:  473:        if (s != RM_OK)
        -:  474:          {
    #####:  475:            mark_ancestor_dirs (ent);
    #####:  476:            fts_skip_tree (fts, ent);
        -:  477:          }
        -:  478:
    #####:  479:        return s;
        -:  480:      }
        -:  481:
        -:  482:    case FTS_F:			/* regular file */
        -:  483:    case FTS_NS:		/* stat(2) failed */
        -:  484:    case FTS_SL:		/* symbolic link */
        -:  485:    case FTS_SLNONE:		/* symbolic link without target */
        -:  486:    case FTS_DP:		/* postorder directory */
        -:  487:    case FTS_DNR:		/* unreadable directory */
        -:  488:    case FTS_NSOK:		/* e.g., dangling symlink */
        -:  489:    case FTS_DEFAULT:		/* none of the above */
        -:  490:      {
        -:  491:        /* With --one-file-system, do not attempt to remove a mount point.
        -:  492:           fts' FTS_XDEV ensures that we don't process any entries under
        -:  493:           the mount point.  */
        5:  494:        if (ent->fts_info == FTS_DP
    #####:  495:            && x->one_file_system
    #####:  496:            && FTS_ROOTLEVEL < ent->fts_level
    #####:  497:            && ent->fts_statp->st_dev != fts->fts_dev)
        -:  498:          {
    #####:  499:            mark_ancestor_dirs (ent);
    #####:  500:            error (0, 0, _("skipping %s, since it's on a different device"),
    #####:  501:                   quote (ent->fts_path));
    #####:  502:            return RM_ERROR;
        -:  503:          }
        -:  504:
        5:  505:        bool is_dir = ent->fts_info == FTS_DP || ent->fts_info == FTS_DNR;
        5:  506:        enum RM_status s = prompt (fts, ent, is_dir, x, PA_REMOVE_DIR, NULL);
        5:  507:        if (s != RM_OK)
    #####:  508:          return s;
        5:  509:        return excise (fts, ent, x, is_dir);
        -:  510:      }
        -:  511:
        -:  512:    case FTS_DC:		/* directory that causes cycles */
    #####:  513:      emit_cycle_warning (ent->fts_path);
    #####:  514:      fts_skip_tree (fts, ent);
    #####:  515:      return RM_ERROR;
        -:  516:
        -:  517:    case FTS_ERR:
        -:  518:      /* Various failures, from opendir to ENOMEM, to failure to "return"
        -:  519:         to preceding directory, can provoke this.  */
    #####:  520:      error (0, ent->fts_errno, _("traversal failed: %s"),
    #####:  521:             quote (ent->fts_path));
    #####:  522:      fts_skip_tree (fts, ent);
    #####:  523:      return RM_ERROR;
        -:  524:
        -:  525:    default:
    #####:  526:      error (0, 0, _("unexpected failure: fts_info=%d: %s\n"
        -:  527:                     "please report to %s"),
    #####:  528:             ent->fts_info,
    #####:  529:             quote (ent->fts_path),
        -:  530:             PACKAGE_BUGREPORT);
    #####:  531:      abort ();
        -:  532:    }
        -:  533:}
        -:  534:
        -:  535:/* Remove FILEs, honoring options specified via X.
        -:  536:   Return RM_OK if successful.  */
        -:  537:enum RM_status
        3:  538:rm (char *const *file, struct rm_options const *x)
        -:  539:{
        3:  540:  enum RM_status rm_status = RM_OK;
        -:  541:
        3:  542:  if (*file)
        -:  543:    {
        3:  544:      int bit_flags = (FTS_CWDFD
        -:  545:                       | FTS_NOSTAT
        -:  546:                       | FTS_PHYSICAL);
        -:  547:
        3:  548:      if (x->one_file_system)
    #####:  549:        bit_flags |= FTS_XDEV;
        -:  550:
        3:  551:      FTS *fts = xfts_open (file, bit_flags, NULL);
        -:  552:
        -:  553:      while (1)
        -:  554:        {
        -:  555:          FTSENT *ent;
        -:  556:
        8:  557:          ent = fts_read (fts);
        8:  558:          if (ent == NULL)
        -:  559:            {
        3:  560:              if (errno != 0)
        -:  561:                {
    #####:  562:                  error (0, errno, _("fts_read failed"));
    #####:  563:                  rm_status = RM_ERROR;
        -:  564:                }
        3:  565:              break;
        -:  566:            }
        -:  567:
        5:  568:          enum RM_status s = rm_fts (fts, ent, x);
        -:  569:
        5:  570:          assert (VALID_STATUS (s));
        5:  571:          UPDATE_STATUS (rm_status, s);
        5:  572:        }
        -:  573:
        3:  574:      if (fts_close (fts) != 0)
        -:  575:        {
    #####:  576:          error (0, errno, _("fts_close failed"));
    #####:  577:          rm_status = RM_ERROR;
        -:  578:        }
        -:  579:    }
        -:  580:
        3:  581:  return rm_status;
        -:  582:}
