extent_copy 

{

  struct extent_scan scan;

  off_t last_ext_start = 0;

  uint64_t last_ext_len = 0;



  /* Keep track of the output position.

     We may need this at the end, for a final ftruncate.  */

  off_t dest_pos = 0;



  extent_scan_init (src_fd, &scan);



  *require_normal_copy = false;

  bool wrote_hole_at_eof = true;

  do

    {

      bool ok = extent_scan_read (&scan);

      if (! ok)

        {

          if (scan.hit_final_extent)

            break;



          if (scan.initial_scan_failed)

            {

              *require_normal_copy = true;

              return false;

            }



          error (0, errno, _("%s: failed to get extents info"),

                 quote (src_name));

          return false;

        }



      unsigned int i;

      bool empty_extent = false;

      for (i = 0; i < scan.ei_count || empty_extent; i++)

        {

          off_t ext_start;

          uint64_t ext_len;

          uint64_t hole_size;



          if (i < scan.ei_count)

            {

              ext_start = scan.ext_info[i].ext_logical;

              ext_len = scan.ext_info[i].ext_length;

            }

          else /* empty extent at EOF.  */

            {

              i--;

              ext_start = last_ext_start + scan.ext_info[i].ext_length;

              ext_len = 0;

            }



          hole_size = ext_start - last_ext_start - last_ext_len;



          wrote_hole_at_eof = false;



          if (hole_size)

            {

              if (lseek (src_fd, ext_start, SEEK_SET) < 0)

                {

                  error (0, errno, _("cannot lseek %s"), quote (src_name));

                fail:

                  extent_scan_free (&scan);

                  return false;

                }



              if ((empty_extent && sparse_mode == SPARSE_ALWAYS)

                  || (!empty_extent && sparse_mode != SPARSE_NEVER))

                {

                  if (lseek (dest_fd, ext_start, SEEK_SET) < 0)

                    {

                      error (0, errno, _("cannot lseek %s"), quote (dst_name));

                      goto fail;

                    }

                  wrote_hole_at_eof = true;

                }

              else

                {

                  /* When not inducing holes and when there is a hole between

                     the end of the previous extent and the beginning of the

                     current one, write zeros to the destination file.  */

                  off_t nzeros = hole_size;

                  if (empty_extent)

                    nzeros = MIN (src_total_size - dest_pos, hole_size);



                  if (! write_zeros (dest_fd, nzeros))

                    {

                      error (0, errno, _("%s: write failed"), quote (dst_name));

                      goto fail;

                    }



                  dest_pos = MIN (src_total_size, ext_start);

                }

            }



          last_ext_start = ext_start;



          /* Treat an unwritten but allocated extent much like a hole.

             I.E. don't read, but don't convert to a hole in the destination,

             unless SPARSE_ALWAYS.  */

          /* For now, do not treat FIEMAP_EXTENT_UNWRITTEN specially,

             because that (in combination with no sync) would lead to data

             loss at least on XFS and ext4 when using 2.6.39-rc3 kernels.  */

          if (0 && (scan.ext_info[i].ext_flags & FIEMAP_EXTENT_UNWRITTEN))

            {

              empty_extent = true;

              last_ext_len = 0;

              if (ext_len == 0) /* The last extent is empty and processed.  */

                empty_extent = false;

            }

          else

            {

              off_t n_read;

              empty_extent = false;

              last_ext_len = ext_len;



              if ( ! sparse_copy (src_fd, dest_fd, buf, buf_size,

                                  sparse_mode == SPARSE_ALWAYS,

                                  src_name, dst_name, ext_len, &n_read,

                                  &wrote_hole_at_eof))

                goto fail;



              dest_pos = ext_start + n_read;

            }



          /* If the file ends with unwritten extents not accounted for in the

             size, then skip processing them, and the associated redundant

             read() calls which will always return 0.  We will need to

             remove this when we add fallocate() so that we can maintain

             extents beyond the apparent size.  */

          if (dest_pos == src_total_size)

            {

              scan.hit_final_extent = true;

              break;

            }

        }



      /* Release the space allocated to scan->ext_info.  */

      extent_scan_free (&scan);



    }

  while (! scan.hit_final_extent);



  /* When the source file ends with a hole, we have to do a little more work,

     since the above copied only up to and including the final extent.

     In order to complete the copy, we may have to insert a hole or write

     zeros in the destination corresponding to the source file's hole-at-EOF.



     In addition, if the final extent was a block of zeros at EOF and we've

     just converted them to a hole in the destination, we must call ftruncate

     here in order to record the proper length in the destination.  */

  if ((dest_pos < src_total_size || wrote_hole_at_eof)

      && (sparse_mode != SPARSE_NEVER

          ? ftruncate (dest_fd, src_total_size)

          : ! write_zeros (dest_fd, src_total_size - dest_pos)))

    {

      error (0, errno, _("failed to extend %s"), quote (dst_name));

      return false;

    }



  return true;

}

