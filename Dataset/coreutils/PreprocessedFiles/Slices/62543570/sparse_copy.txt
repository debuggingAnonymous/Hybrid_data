sparse_copy 

{

  *last_write_made_hole = false;

  *total_n_read = 0;



  while (max_n_read)

    {

      bool make_hole = false;



      ssize_t n_read = read (src_fd, buf, MIN (max_n_read, buf_size));

      if (n_read < 0)

        {

          if (errno == EINTR)

            continue;

          error (0, errno, _("reading %s"), quote (src_name));

          return false;

        }

      if (n_read == 0)

        break;

      max_n_read -= n_read;

      *total_n_read += n_read;



      if (make_holes)

        {

          /* Sentinel required by is_nul().  */

          buf[n_read] = '\1';

#ifdef lint

          typedef uintptr_t word;

          /* Usually, buf[n_read] is not the byte just before a "word"

             (aka uintptr_t) boundary.  In that case, the word-oriented

             test below (*wp++ == 0) would read some uninitialized bytes

             after the sentinel.  To avoid false-positive reports about

             this condition (e.g., from a tool like valgrind), set the

             remaining bytes -- to any value.  */

          memset (buf + n_read + 1, 0, sizeof (word) - 1);

#endif



          if ((make_hole = is_nul (buf, n_read)))

            {

              if (lseek (dest_fd, n_read, SEEK_CUR) < 0)

                {

                  error (0, errno, _("cannot lseek %s"), quote (dst_name));

                  return false;

                }

            }

        }



      if (!make_hole)

        {

          size_t n = n_read;

          if (full_write (dest_fd, buf, n) != n)

            {

              error (0, errno, _("writing %s"), quote (dst_name));

              return false;

            }



          /* It is tempting to return early here upon a short read from a

             regular file.  That would save the final read syscall for each

             file.  Unfortunately that doesn't work for certain files in

             /proc with linux kernels from at least 2.6.9 .. 2.6.29.  */

        }



      *last_write_made_hole = make_hole;

    }



  return true;

}

