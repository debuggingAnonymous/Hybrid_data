eval6 

{

  VALUE *l;

  VALUE *r;

  VALUE *v;

  VALUE *i1;

  VALUE *i2;



#ifdef EVAL_TRACE

  trace ("eval6");

#endif

  if (nextarg ("+"))

    {

      if (nomoreargs ())

	syntax_error ();

      return str_value (*args++);

    }

  else if (nextarg ("length"))

    {

      r = eval6 (evaluate);

      tostring (r);

      v = int_value (strlen (r->u.s));

      freev (r);

      return v;

    }

  else if (nextarg ("match"))

    {

      l = eval6 (evaluate);

      r = eval6 (evaluate);

      if (evaluate)

	{

	  v = docolon (l, r);

	  freev (l);

	}

      else

	v = l;

      freev (r);

      return v;

    }

  else if (nextarg ("index"))

    {

      l = eval6 (evaluate);

      r = eval6 (evaluate);

      tostring (l);

      tostring (r);

      v = int_value (strcspn (l->u.s, r->u.s) + 1);

      if (v->u.i == strlen (l->u.s) + 1)

	v->u.i = 0;

      freev (l);

      freev (r);

      return v;

    }

  else if (nextarg ("substr"))

    {

      l = eval6 (evaluate);

      i1 = eval6 (evaluate);

      i2 = eval6 (evaluate);

      tostring (l);

      if (!toarith (i1) || !toarith (i2)

	  || strlen (l->u.s) < i1->u.i

	  || i1->u.i <= 0 || i2->u.i <= 0)

	v = str_value ("");

      else

	{

	  v = xmalloc (sizeof *v);

	  v->type = string;

	  v->u.s = strncpy (xmalloc (i2->u.i + 1),

			    l->u.s + i1->u.i - 1, i2->u.i);

	  v->u.s[i2->u.i] = 0;

	}

      freev (l);

      freev (i1);

      freev (i2);

      return v;

    }

  else

    return eval7 (evaluate);

}

