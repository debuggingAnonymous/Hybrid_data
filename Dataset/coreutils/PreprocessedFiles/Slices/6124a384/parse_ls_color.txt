parse_ls_color 

{

  const char *p;		/* Pointer to character being parsed */

  char *buf;			/* color_buf buffer pointer */

  int ind_no;			/* Indicator number */

  char label[3];		/* Indicator label */

  struct color_ext_type *ext;	/* Extension we are working on */



  if ((p = getenv ("LS_COLORS")) == NULL || *p == '\0')

    return;



  ext = NULL;

  strcpy (label, "??");



  /* This is an overly conservative estimate, but any possible

     LS_COLORS string will *not* generate a color_buf longer than

     itself, so it is a safe way of allocating a buffer in

     advance.  */

  buf = color_buf = xstrdup (p);



  enum parse_state state = PS_START;

  while (true)

    {

      switch (state)

        {

        case PS_START:		/* First label character */

          switch (*p)

            {

            case ':':

              ++p;

              break;



            case '*':

              /* Allocate new extension block and add to head of

                 linked list (this way a later definition will

                 override an earlier one, which can be useful for

                 having terminal-specific defs override global).  */



              ext = xmalloc (sizeof *ext);

              ext->next = color_ext_list;

              color_ext_list = ext;



              ++p;

              ext->ext.string = buf;



              state = (get_funky_string (&buf, &p, true, &ext->ext.len)

                       ? PS_4 : PS_FAIL);

              break;



            case '\0':

              state = PS_DONE;	/* Done! */

              goto done;



            default:	/* Assume it is file type label */

              label[0] = *(p++);

              state = PS_2;

              break;

            }

          break;



        case PS_2:		/* Second label character */

          if (*p)

            {

              label[1] = *(p++);

              state = PS_3;

            }

          else

            state = PS_FAIL;	/* Error */

          break;



        case PS_3:		/* Equal sign after indicator label */

          state = PS_FAIL;	/* Assume failure...  */

          if (*(p++) == '=')/* It *should* be...  */

            {

              for (ind_no = 0; indicator_name[ind_no] != NULL; ++ind_no)

                {

                  if (STREQ (label, indicator_name[ind_no]))

                    {

                      color_indicator[ind_no].string = buf;

                      state = (get_funky_string (&buf, &p, false,

                                                 &color_indicator[ind_no].len)

                               ? PS_START : PS_FAIL);

                      break;

                    }

                }

              if (state == PS_FAIL)

                error (0, 0, _("unrecognized prefix: %s"), quotearg (label));

            }

          break;



        case PS_4:		/* Equal sign after *.ext */

          if (*(p++) == '=')

            {

              ext->seq.string = buf;

              state = (get_funky_string (&buf, &p, false, &ext->seq.len)

                       ? PS_START : PS_FAIL);

            }

          else

            state = PS_FAIL;

          break;



        case PS_FAIL:

          goto done;



        default:

          abort ();

        }

    }

 done:



  if (state == PS_FAIL)

    {

      struct color_ext_type *e;

      struct color_ext_type *e2;



      error (0, 0,

             _("unparsable value for LS_COLORS environment variable"));

      free (color_buf);

      for (e = color_ext_list; e != NULL; /* empty */)

        {

          e2 = e;

          e = e->next;

          free (e2);

        }

      print_with_color = false;

    }



  if (color_indicator[C_LINK].len == 6

      && !STRNCMP_LIT (color_indicator[C_LINK].string, "target"))

    color_symlink_as_referent = true;

}

