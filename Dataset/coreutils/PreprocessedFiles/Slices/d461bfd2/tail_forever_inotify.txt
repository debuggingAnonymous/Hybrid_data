tail_forever_inotify 

{

  unsigned int max_realloc = 3;



  /* Map an inotify watch descriptor to the name of the file it's watching.  */

  Hash_table *wd_to_name;



  bool found_watchable_file = false;

  bool found_unwatchable_dir = false;

  bool no_inotify_resources = false;

  bool writer_is_dead = false;

  int prev_wd;

  size_t evlen = 0;

  char *evbuf;

  size_t evbuf_off = 0;

  size_t len = 0;



  wd_to_name = hash_initialize (n_files, NULL, wd_hasher, wd_comparator, NULL);

  if (! wd_to_name)

    xalloc_die ();



  /* Add an inotify watch for each watched file.  If -F is specified then watch

     its parent directory too, in this way when they re-appear we can add them

     again to the watch list.  */

  size_t i;

  for (i = 0; i < n_files; i++)

    {

      if (!f[i].ignore)

        {

          size_t fnlen = strlen (f[i].name);

          if (evlen < fnlen)

            evlen = fnlen;



          f[i].wd = -1;



          if (follow_mode == Follow_name)

            {

              size_t dirlen = dir_len (f[i].name);

              char prev = f[i].name[dirlen];

              f[i].basename_start = last_component (f[i].name) - f[i].name;



              f[i].name[dirlen] = '\0';



               /* It's fine to add the same directory more than once.

                  In that case the same watch descriptor is returned.  */

              f[i].parent_wd = inotify_add_watch (wd, dirlen ? f[i].name : ".",

                                                  (IN_CREATE | IN_MOVED_TO

                                                   | IN_ATTRIB));



              f[i].name[dirlen] = prev;



              if (f[i].parent_wd < 0)

                {

                  if (errno != ENOSPC) /* suppress confusing error.  */

                    error (0, errno, _("cannot watch parent directory of %s"),

                           quote (f[i].name));

                  else

                    error (0, 0, _("inotify resources exhausted"));

                  found_unwatchable_dir = true;

                  /* We revert to polling below.  Note invalid uses

                     of the inotify API will still be diagnosed.  */

                  break;

                }

            }



          f[i].wd = inotify_add_watch (wd, f[i].name, inotify_wd_mask);



          if (f[i].wd < 0)

            {

              if (errno == ENOSPC)

                {

                  no_inotify_resources = true;

                  error (0, 0, _("inotify resources exhausted"));

                }

              else if (errno != f[i].errnum)

                error (0, errno, _("cannot watch %s"), quote (f[i].name));

              continue;

            }



          if (hash_insert (wd_to_name, &(f[i])) == NULL)

            xalloc_die ();



          found_watchable_file = true;

        }

    }



  /* Linux kernel 2.6.24 at least has a bug where eventually, ENOSPC is always

     returned by inotify_add_watch.  In any case we should revert to polling

     when there are no inotify resources.  Also a specified directory may not

     be currently present or accessible, so revert to polling.  */

  if (no_inotify_resources || found_unwatchable_dir)

    {

      /* FIXME: release hash and inotify resources allocated above.  */

      errno = 0;

      return true;

    }

  if (follow_mode == Follow_descriptor && !found_watchable_file)

    return false;



  prev_wd = f[n_files - 1].wd;



  /* Check files again.  New data can be available since last time we checked

     and before they are watched by inotify.  */

  for (i = 0; i < n_files; i++)

    {

      if (!f[i].ignore)

        check_fspec (&f[i], f[i].wd, &prev_wd);

    }



  evlen += sizeof (struct inotify_event) + 1;

  evbuf = xmalloc (evlen);



  /* Wait for inotify events and handle them.  Events on directories

     ensure that watched files can be re-added when following by name.

     This loop blocks on the 'safe_read' call until a new event is notified.

     But when --pid=P is specified, tail usually waits via the select.  */

  while (1)

    {

      struct File_spec *fspec;

      struct inotify_event *ev;



      /* When following by name without --retry, and the last file has

         been unlinked or renamed-away, diagnose it and return.  */

      if (follow_mode == Follow_name

          && ! reopen_inaccessible_files

          && hash_get_n_entries (wd_to_name) == 0)

        {

          error (0, 0, _("no files remaining"));

          return false;

        }



      /* When watching a PID, ensure that a read from WD will not block

         indefinitely.  */

      if (pid)

        {

          if (writer_is_dead)

            exit (EXIT_SUCCESS);



          writer_is_dead = (kill (pid, 0) != 0 && errno != EPERM);



          struct timeval delay; /* how long to wait for file changes.  */

          if (writer_is_dead)

            delay.tv_sec = delay.tv_usec = 0;

          else

            {

              delay.tv_sec = (time_t) sleep_interval;

              delay.tv_usec = 1000000 * (sleep_interval - delay.tv_sec);

            }



           fd_set rfd;

           FD_ZERO (&rfd);

           FD_SET (wd, &rfd);



           int file_change = select (wd + 1, &rfd, NULL, NULL, &delay);



           if (file_change == 0)

             continue;

           else if (file_change == -1)

             error (EXIT_FAILURE, errno, _("error monitoring inotify event"));

        }



      if (len <= evbuf_off)

        {

          len = safe_read (wd, evbuf, evlen);

          evbuf_off = 0;



          /* For kernels prior to 2.6.21, read returns 0 when the buffer

             is too small.  */

          if ((len == 0 || (len == SAFE_READ_ERROR && errno == EINVAL))

              && max_realloc--)

            {

              len = 0;

              evlen *= 2;

              evbuf = xrealloc (evbuf, evlen);

              continue;

            }



          if (len == 0 || len == SAFE_READ_ERROR)

            error (EXIT_FAILURE, errno, _("error reading inotify event"));

        }



      ev = (struct inotify_event *) (evbuf + evbuf_off);

      evbuf_off += sizeof (*ev) + ev->len;



      if (ev->len) /* event on ev->name in watched directory  */

        {

          size_t j;

          for (j = 0; j < n_files; j++)

            {

              /* With N=hundreds of frequently-changing files, this O(N^2)

                 process might be a problem.  FIXME: use a hash table?  */

              if (f[j].parent_wd == ev->wd

                  && STREQ (ev->name, f[j].name + f[j].basename_start))

                break;

            }



          /* It is not a watched file.  */

          if (j == n_files)

            continue;



          /* It's fine to add the same file more than once.  */

          int new_wd = inotify_add_watch (wd, f[j].name, inotify_wd_mask);

          if (new_wd < 0)

            {

              error (0, errno, _("cannot watch %s"), quote (f[j].name));

              continue;

            }



          fspec = &(f[j]);



          /* Remove 'fspec' and re-add it using 'new_fd' as its key.  */

          hash_delete (wd_to_name, fspec);

          fspec->wd = new_wd;



          /* If the file was moved then inotify will use the source file wd for

             the destination file.  Make sure the key is not present in the

             table.  */

          struct File_spec *prev = hash_delete (wd_to_name, fspec);

          if (prev && prev != fspec)

            {

              if (follow_mode == Follow_name)

                recheck (prev, false);

              prev->wd = -1;

              close_fd (prev->fd, pretty_name (prev));

            }



          if (hash_insert (wd_to_name, fspec) == NULL)

            xalloc_die ();



          if (follow_mode == Follow_name)

            recheck (fspec, false);

        }

      else

        {

          struct File_spec key;

          key.wd = ev->wd;

          fspec = hash_lookup (wd_to_name, &key);

        }



      if (! fspec)

        continue;



      if (ev->mask & (IN_ATTRIB | IN_DELETE_SELF | IN_MOVE_SELF))

        {

          /* For IN_DELETE_SELF, we always want to remove the watch.

             However, for IN_MOVE_SELF (the file we're watching has

             been clobbered via a rename), when tailing by NAME, we

             must continue to watch the file.  It's only when following

             by file descriptor that we must remove the watch.  */

          if ((ev->mask & IN_DELETE_SELF)

              || ((ev->mask & IN_MOVE_SELF)

                  && follow_mode == Follow_descriptor))

            {

              inotify_rm_watch (wd, fspec->wd);

              hash_delete (wd_to_name, fspec);

            }

          if (follow_mode == Follow_name)

            recheck (fspec, false);



          continue;

        }

      check_fspec (fspec, ev->wd, &prev_wd);

    }

}

