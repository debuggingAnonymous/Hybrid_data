tail_forever 

{

  /* Use blocking I/O as an optimization, when it's easy.  */

  bool blocking = (pid == 0 && follow_mode == Follow_descriptor

                   && n_files == 1 && ! S_ISREG (f[0].mode));

  size_t last;

  bool writer_is_dead = false;



  last = n_files - 1;



  while (1)

    {

      size_t i;

      bool any_input = false;



      for (i = 0; i < n_files; i++)

        {

          int fd;

          char const *name;

          mode_t mode;

          struct stat stats;

          uintmax_t bytes_read;



          if (f[i].ignore)

            continue;



          if (f[i].fd < 0)

            {

              recheck (&f[i], blocking);

              continue;

            }



          fd = f[i].fd;

          name = pretty_name (&f[i]);

          mode = f[i].mode;



          if (f[i].blocking != blocking)

            {

              int old_flags = fcntl (fd, F_GETFL);

              int new_flags = old_flags | (blocking ? 0 : O_NONBLOCK);

              if (old_flags < 0

                  || (new_flags != old_flags

                      && fcntl (fd, F_SETFL, new_flags) == -1))

                {

                  /* Don't update f[i].blocking if fcntl fails.  */

                  if (S_ISREG (f[i].mode) && errno == EPERM)

                    {

                      /* This happens when using tail -f on a file with

                         the append-only attribute.  */

                    }

                  else

                    error (EXIT_FAILURE, errno,

                           _("%s: cannot change nonblocking mode"), name);

                }

              else

                f[i].blocking = blocking;

            }



          if (!f[i].blocking)

            {

              if (fstat (fd, &stats) != 0)

                {

                  f[i].fd = -1;

                  f[i].errnum = errno;

                  error (0, errno, "%s", name);

                  close (fd); /* ignore failure */

                  continue;

                }



              if (f[i].mode == stats.st_mode

                  && (! S_ISREG (stats.st_mode) || f[i].size == stats.st_size)

                  && timespec_cmp (f[i].mtime, get_stat_mtime (&stats)) == 0)

                {

                  if ((max_n_unchanged_stats_between_opens

                       <= f[i].n_unchanged_stats++)

                      && follow_mode == Follow_name)

                    {

                      recheck (&f[i], f[i].blocking);

                      f[i].n_unchanged_stats = 0;

                    }

                  continue;

                }



              /* This file has changed.  Print out what we can, and

                 then keep looping.  */



              f[i].mtime = get_stat_mtime (&stats);

              f[i].mode = stats.st_mode;



              /* reset counter */

              f[i].n_unchanged_stats = 0;



              if (S_ISREG (mode) && stats.st_size < f[i].size)

                {

                  error (0, 0, _("%s: file truncated"), name);

                  last = i;

                  xlseek (fd, stats.st_size, SEEK_SET, name);

                  f[i].size = stats.st_size;

                  continue;

                }



              if (i != last)

                {

                  if (print_headers)

                    write_header (name);

                  last = i;

                }

            }



          bytes_read = dump_remainder (name, fd,

                                       (f[i].blocking

                                        ? COPY_A_BUFFER : COPY_TO_EOF));

          any_input |= (bytes_read != 0);

          f[i].size += bytes_read;

        }



      if (! any_live_files (f, n_files) && ! reopen_inaccessible_files)

        {

          error (0, 0, _("no files remaining"));

          break;

        }



      if ((!any_input || blocking) && fflush (stdout) != 0)

        error (EXIT_FAILURE, errno, _("write error"));



      /* If nothing was read, sleep and/or check for dead writers.  */

      if (!any_input)

        {

          if (writer_is_dead)

            break;



          /* Once the writer is dead, read the files once more to

             avoid a race condition.  */

          writer_is_dead = (pid != 0

                            && kill (pid, 0) != 0

                            /* Handle the case in which you cannot send a

                               signal to the writer, so kill fails and sets

                               errno to EPERM.  */

                            && errno != EPERM);



          if (!writer_is_dead && xnanosleep (sleep_interval))

            error (EXIT_FAILURE, errno, _("cannot read realtime clock"));



        }

    }

}

