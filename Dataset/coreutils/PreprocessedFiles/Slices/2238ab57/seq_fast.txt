seq_fast 

{

  /* Skip past any leading 0's.  Without this, our naive cmp

     function would declare 000 to be larger than 99.  */

  a = trim_leading_zeros (a);

  b = trim_leading_zeros (b);



  size_t p_len = strlen (a);

  size_t q_len = strlen (b);

  size_t n = MAX (p_len, q_len);

  char *p0 = xmalloc (n + 1);

  char *p = memcpy (p0 + n - p_len, a, p_len + 1);

  char *q0 = xmalloc (n + 1);

  char *q = memcpy (q0 + n - q_len, b, q_len + 1);



  bool ok = cmp (p, p_len, q, q_len) <= 0;

  if (ok)

    {

      /* Buffer at least this many numbers per fwrite call.

         This gives a speed-up of more than 2x over the unbuffered code

         when printing the first 10^9 integers.  */

      enum {N = 40};

      char *buf = xmalloc (N * (n + 1));

      char const *buf_end = buf + N * (n + 1);



      char *z = buf;



      /* Write first number to buffer.  */

      z = mempcpy (z, p, p_len);



      /* Append separator then number.  */

      while (cmp (p, p_len, q, q_len) < 0)

        {

          *z++ = *separator;

          incr (&p, &p_len);

          z = mempcpy (z, p, p_len);

          /* If no place for another separator + number then

             output buffer so far, and reset to start of buffer.  */

          if (buf_end - (n + 1) < z)

            {

              fwrite (buf, z - buf, 1, stdout);

              z = buf;

            }

        }



      /* Write any remaining buffered output, and the terminator.  */

      *z++ = *terminator;

      fwrite (buf, z - buf, 1, stdout);



      IF_LINT (free (buf));

    }



  free (p0);

  free (q0);

  return ok;

}

