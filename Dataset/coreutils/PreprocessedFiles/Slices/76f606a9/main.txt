main 

{

  int optc;

  operand first = { 1, 1, 0 };

  operand step = { 1, 1, 0 };

  operand last;

  struct layout layout = { 0, 0 };



  /* The printf(3) format used for output.  */

  char const *format_str = NULL;



  initialize_main (&argc, &argv);

  set_program_name (argv[0]);

  setlocale (LC_ALL, "");

  bindtextdomain (PACKAGE, LOCALEDIR);

  textdomain (PACKAGE);



  atexit (close_stdout);



  equal_width = false;

  separator = "\n";



  /* We have to handle negative numbers in the command line but this

     conflicts with the command line arguments.  So explicitly check first

     whether the next argument looks like a negative number.  */

  while (optind < argc)

    {

      if (argv[optind][0] == '-'

          && ((optc = argv[optind][1]) == '.' || ISDIGIT (optc)))

        {

          /* means negative number */

          break;

        }



      optc = getopt_long (argc, argv, "+f:s:w", long_options, NULL);

      if (optc == -1)

        break;



      switch (optc)

        {

        case 'f':

          format_str = optarg;

          break;



        case 's':

          separator = optarg;

          break;



        case 'w':

          equal_width = true;

          break;



        case_GETOPT_HELP_CHAR;



        case_GETOPT_VERSION_CHAR (PROGRAM_NAME, AUTHORS);



        default:

          usage (EXIT_FAILURE);

        }

    }



  unsigned int n_args = argc - optind;

  if (n_args < 1)

    {

      error (0, 0, _("missing operand"));

      usage (EXIT_FAILURE);

    }



  if (3 < n_args)

    {

      error (0, 0, _("extra operand %s"), quote (argv[optind + 3]));

      usage (EXIT_FAILURE);

    }



  if (format_str)

    format_str = long_double_format (format_str, &layout);



  if (format_str != NULL && equal_width)

    {

      error (0, 0, _("format string may not be specified"

                     " when printing equal width strings"));

      usage (EXIT_FAILURE);

    }



  /* If the following hold:

     - no format string, [FIXME: relax this, eventually]

     - integer start (or no start)

     - integer end

     - increment == 1 or not specified [FIXME: relax this, eventually]

     then use the much more efficient integer-only code.  */

  if (all_digits_p (argv[optind])

      && (n_args == 1 || all_digits_p (argv[optind + 1]))

      && (n_args < 3 || STREQ ("1", argv[optind + 2]))

      && !equal_width && !format_str && strlen (separator) == 1)

    {

      char const *s1 = n_args == 1 ? "1" : argv[optind];

      char const *s2 = n_args == 1 ? argv[optind] : argv[optind + 1];

      if (seq_fast (s1, s2))

        exit (EXIT_SUCCESS);



      /* Upon any failure, let the more general code deal with it.  */

    }



  last = scan_arg (argv[optind++]);



  if (optind < argc)

    {

      first = last;

      last = scan_arg (argv[optind++]);



      if (optind < argc)

        {

          step = last;

          last = scan_arg (argv[optind++]);

        }

    }



  if (first.precision == 0 && step.precision == 0 && last.precision == 0

      && 0 <= first.value && step.value == 1 && 0 <= last.value

      && !equal_width && !format_str && strlen (separator) == 1)

    {

      char *s1;

      char *s2;

      if (asprintf (&s1, "%0.Lf", first.value) < 0)

        xalloc_die ();

      if (asprintf (&s2, "%0.Lf", last.value) < 0)

        xalloc_die ();



      if (seq_fast (s1, s2))

        {

          IF_LINT (free (s1));

          IF_LINT (free (s2));

          exit (EXIT_SUCCESS);

        }



      free (s1);

      free (s2);

      /* Upon any failure, let the more general code deal with it.  */

    }



  if (format_str == NULL)

    format_str = get_default_format (first, step, last);



  print_numbers (format_str, layout, first.value, step.value, last.value);



  exit (EXIT_SUCCESS);

}

